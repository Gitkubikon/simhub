import{g2 as e,g4 as r,em as t,eo as s,ep as a,en as i,eq as l,g3 as o,gd as n,gc as p,er as u,I as c,ej as h,bZ as d,es as y,gt as v,b as f,eg as m,gG as g,fR as _,fy as S,e as b,y as T,et as j,bj as w,gH as O,ev as U,a as R,Z as P}from"./index-DSIPxOWi.js";import{m as W,f as L,t as B}from"./SublayersOwner-CtZeZB5i.js";import{o as M}from"./imageBitmapUtils-CleAXumn.js";import"./QueryTask-D61WShEy.js";import"./infoFor3D-BTCPmnmy.js";import"./executeForIds-vkxYbvNq.js";import"./query-C2USZ63O.js";import"./normalizeUtils-BrH-PrZy.js";import"./normalizeUtilsCommon-BU8xfl77.js";import"./pbfQueryUtils-DUjEbwA9.js";import"./pbf-B53Txr8m.js";import"./executeQueryJSON-DDi8KdIf.js";import"./executeQueryPBF-71YCUWAF.js";import"./sublayerUtils-DIUcTD2L.js";var N;const k=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let A=N=class extends(e(r(W(t(L(s(a(i(l(o(n(p(P))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return"string"==typeof e?{url:e,...r}:e}load(e){const r=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(u).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){var e;const r=null==(e=this.parsedUrl)?void 0:e.path.toLowerCase();return r?this._getDefaultAttribution(this._getMapName(r)):null}readSpatialReference(e,r){var t;return(e=e||(null==(t=r.tileInfo)?void 0:t.spatialReference))&&c.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const a=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),i=[],l={writeSublayerStructure:!1,...s};a.forEach((e=>{const r=e.write({},l);i.push(r)})),i.some((e=>Object.keys(e).length>1))&&(r.layers=i)}get tileServers(){var e;return this._getDefaultTileServers(null==(e=this.parsedUrl)?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map((e=>h(e).path)):null}fetchTile(e,r,t,s={}){const{signal:a}=s,i=this.getTileUrl(e,r,t),l={responseType:"image",signal:a,query:{...this.refreshParameters}};return d(i,l).then((e=>e.data))}async fetchImageBitmapTile(e,r,t,s={}){const{signal:a}=s;if(this.fetchTile!==N.prototype.fetchTile){const i=await this.fetchTile(e,r,t,s);return M(i,e,r,t,a)}const i=this.getTileUrl(e,r,t),l={responseType:"blob",signal:a,query:{...this.refreshParameters}},{data:o}=await d(i,l);return M(o,e,r,t,a)}getTileUrl(e,r,t){var s,a;const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=y({...null==(s=this.parsedUrl)?void 0:s.query,blankTile:!i&&null,...this.customParameters,token:this.apiKey}),o=this.tileServers;return`${o&&o.length?o[r%o.length]:null==(a=this.parsedUrl)?void 0:a.path}/tile/${e}/${r}/${t}${l?"?"+l:""}`}loadAll(){return v(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new f("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new f("tile-layer:undefined-url","layer's url is not defined");const s=m(this.parsedUrl.path);if(null!=s&&"ImageServer"===s.serverType)throw new f("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");d(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!g(t))return this._fetchServerVersion(t,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!_(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return d(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new f("tile-layer:version-not-available")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(null==e)return null;let r;e=e.toLowerCase();for(let t=0,s=k.length;t<s;t++)if(r=k[t],r.toLowerCase().includes(e))return S("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(null==e)return[];const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[I]}};b([T({readOnly:!0})],A.prototype,"attributionDataUrl",null),b([T({type:["show","hide","hide-children"]})],A.prototype,"listMode",void 0),b([T({json:{read:!0,write:!0}})],A.prototype,"blendMode",void 0),b([T({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],A.prototype,"isReference",void 0),b([T({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],A.prototype,"operationalLayerType",void 0),b([T({type:Boolean})],A.prototype,"resampling",void 0),b([T()],A.prototype,"sourceJSON",void 0),b([T({type:c})],A.prototype,"spatialReference",void 0),b([j("spatialReference",["spatialReference","tileInfo"])],A.prototype,"readSpatialReference",null),b([T({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],A.prototype,"path",void 0),b([T({readOnly:!0})],A.prototype,"sublayers",void 0),b([w("sublayers",{layers:{type:[B]}})],A.prototype,"writeSublayers",null),b([T({json:{read:!1,write:!1}})],A.prototype,"popupEnabled",void 0),b([T()],A.prototype,"tileServers",null),b([O("tileServers")],A.prototype,"castTileServers",null),b([T({readOnly:!0,json:{read:!1}})],A.prototype,"type",void 0),b([T(U)],A.prototype,"url",void 0),A=N=b([R("esri.layers.TileLayer")],A);const I=Symbol("default-fetch-tile");A.prototype.fetchTile[I]=!0;const C=A;export{C as default};
