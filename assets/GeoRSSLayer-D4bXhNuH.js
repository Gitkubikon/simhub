import{g2 as e,g3 as t,eo as o,ep as r,g4 as s,eq as i,ei as l,er as a,bZ as n,f1 as y,g5 as p,e as u,y as d,et as h,az as c,g6 as g,g7 as v,ev as S,a as m,g8 as f,g9 as b,ga as C,gb as G,aj as x,Z as P}from"./index-DSIPxOWi.js";const _=["atom","xml"],j={base:f,key:"type",typeMap:{"simple-line":b},errorContext:"symbol"},w={base:f,key:"type",typeMap:{"picture-marker":C,"simple-marker":G},errorContext:"symbol"},R={base:f,key:"type",typeMap:{"simple-fill":x},errorContext:"symbol"};let k=class extends(e(t(o(r(s(i(P))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&(null==(t=o.outline)?void 0:t.style.includes("esriSFS"))&&(o.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?l(this.url,_)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(a).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:o}=await n(p.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:y(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return o}_hasGeometry(e){var t;return(null==(t=this.featureCollections)?void 0:t.some((t=>{var o,r;return(null==(o=t.featureSet)?void 0:o.geometryType)===e&&(null==(r=t.featureSet.features)?void 0:r.length)>0})))??!1}};u([d()],k.prototype,"description",void 0),u([d()],k.prototype,"featureCollections",void 0),u([h("service","featureCollections",["featureCollection.layers"])],k.prototype,"readFeatureCollections",null),u([d({type:c,json:{name:"lookAtExtent"}})],k.prototype,"fullExtent",void 0),u([d(g)],k.prototype,"id",void 0),u([d(v)],k.prototype,"legendEnabled",void 0),u([d({types:j,json:{write:!0}})],k.prototype,"lineSymbol",void 0),u([d({type:["show","hide"]})],k.prototype,"listMode",void 0),u([d({types:w,json:{write:!0}})],k.prototype,"pointSymbol",void 0),u([d({types:R,json:{write:!0}})],k.prototype,"polygonSymbol",void 0),u([d({type:["GeoRSS"]})],k.prototype,"operationalLayerType",void 0),u([d(S)],k.prototype,"url",void 0),u([d({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],k.prototype,"title",null),u([d({readOnly:!0,json:{read:!1},value:"geo-rss"})],k.prototype,"type",void 0),k=u([m("esri.layers.GeoRSSLayer")],k);const F=k;export{F as default};
