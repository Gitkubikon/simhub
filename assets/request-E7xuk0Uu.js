import{b as t}from"./index-DSIPxOWi.js";function e(s,a){let r=a.responseType;r?"array-buffer"!==r&&"blob"!==r&&"json"!==r&&"native"!==r&&"native-request-init"!==r&&"text"!==r&&(r="text"):r="json",a.responseType=r;const n=a.signal;return delete a.signal,globalThis.invokeStaticMessage("request",{url:s,options:a},{signal:n}).then((async o=>{let i,l,u,c,b;if(o.data)if(o.data instanceof ArrayBuffer){if(!("json"!==r&&"text"!==r&&"blob"!==r||(i=new Blob([o.data]),"json"!==r&&"text"!==r||(c=await i.text(),"json"!==r)))){try{l=JSON.parse(c||null)}catch(p){const r={...p,url:s,requestOptions:a};throw new t("request:server",p.message,r)}if(l.error){const r={...l.error,url:s,requestOptions:a};throw new t("request:server",l.error.message,r)}}}else"native"===r&&(o.data.signal=n,u=await fetch(o.data.url,o.data),o.httpStatus=u.status);switch(r){case"blob":b=i;break;case"json":b=l;break;case"native":b=u;break;case"text":b=c;break;default:b=o.data}return{data:b,httpStatus:o.httpStatus,requestOptions:a,ssl:o.ssl,url:s}}))}export{e as execute};
