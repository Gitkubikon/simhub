import{a_ as e,I as t,v as r,az as s,aw as n,bJ as o,n as a}from"./index-DSIPxOWi.js";import{$ as i}from"./Mesh-BS04vQSz.js";import{N as u}from"./MeshTransform-Y0ppddED.js";import{o as c,i as f}from"./External-Djr0rIk9.js";import{s as l}from"./infoFor3D-BTCPmnmy.js";import"./vertexSpaceConversion-C_GU75pR.js";const m=()=>a.getLogger("esri.rest.support.meshFeatureSet");function p(s,n,o){const a=o.features;o.features=[],delete o.geometryType;const i=e.fromJSON(o);if(i.geometryType="mesh",!o.assetMaps)return i;const u=d(n,o.assetMaps),c=s.sourceSpatialReference??t.WGS84,f=o.globalIdFieldName,{outFields:l}=s,S=null!=l&&l.length>0?function g(e){return({attributes:t})=>{if(!t)return{};if(!e)return t;for(const r in t)e.has(r)||delete t[r];return t}}(l.includes("*")?null:new Set(l)):()=>({});for(const e of a){const t=y(e,f,c,n,u);i.features.push(new r({geometry:t,attributes:S(e)}))}return i}function y(e,t,r,o,a){const l=e.attributes[t],N=a.get(l);if(null==N||!e.geometry)return null;const w=function E({attributes:e},t,{transformFieldRoles:r}){const s=e[r.originX],o=e[r.originY],a=e[r.originZ];return new n({x:s,y:o,z:a,spatialReference:t})}(e,r,o),F=s.fromJSON(e.geometry);F.spatialReference=r;const T=function h(e,{transformFieldRoles:t}){return new u({translation:[e[t.translationX],-e[t.translationZ],e[t.translationY]],rotationAxis:[e[t.rotationX],-e[t.rotationZ],e[t.rotationY]],rotationAngle:e[t.rotationDeg],scale:[e[t.scaleX],e[t.scaleZ],e[t.scaleY]]})}(e.attributes,o),x=r.isGeographic?"local":"georeferenced",I=function D(e){const t=Array.from(e.files.values()),r=new Array;for(const s of t){if(s.status!==S.COMPLETED)return null;const e=new Array;for(const t of s.parts){if(!t)return null;e.push(new c(t.url,t.hash))}r.push(new f(s.name,s.mimeType,e))}return r}(N);return I?i.createWithExternalSource(w,I,{extent:F,transform:T,vertexSpace:x}):i.createIncomplete(w,{extent:F,transform:T,vertexSpace:x})}var S,N;function d(e,t){const r=new Map;for(const s of t){const t=s.parentGlobalId;if(null==t)continue;const n=s.assetName,a=s.assetType,i=s.assetHash,u=s.assetURL,c=s.conversionStatus,f=s.seqNo,S=l(a,e.supportedFormats);if(!S){m().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${a}, but it does not list it as a supported type`);continue}const N=o(r,t,(()=>({files:new Map})));o(N.files,n,(()=>({name:n,type:a,mimeType:S,status:M(c),parts:[]}))).parts[f]={hash:i,url:u}}return r}function M(e){switch(e){case"COMPLETED":case"SUBMITTED":return S.COMPLETED;case"INPROGRESS":return S.PENDING;default:return S.FAILED}}(N=S||(S={}))[N.FAILED=0]="FAILED",N[N.PENDING=1]="PENDING",N[N.COMPLETED=2]="COMPLETED";export{d as assetMapFromAssetMapsJSON,y as extractMesh,p as meshFeatureSetFromJSON};
