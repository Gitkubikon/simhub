import{bZ as e,gr as t,jO as o,a$ as i,a_ as c}from"./index-DSIPxOWi.js";import{t as d}from"./query-C2USZ63O.js";import"./normalizeUtils-BrH-PrZy.js";import"./normalizeUtilsCommon-BU8xfl77.js";import"./pbfQueryUtils-DUjEbwA9.js";import"./pbf-B53Txr8m.js";function r(e,o){const i=e.toJSON();return i.objectIds&&(i.objectIds=i.objectIds.join(",")),i.orderByFields&&(i.orderByFields=i.orderByFields.join(",")),i.outFields&&!(null==o?void 0:o.returnCountOnly)?i.outFields.includes("*")?i.outFields="*":i.outFields=i.outFields.join(","):delete i.outFields,i.outSR&&(i.outSR=t(i.outSR)),i.dynamicDataSource&&(i.layer=JSON.stringify({source:i.dynamicDataSource}),delete i.dynamicDataSource),i}async function a(t,o,i={},c){const l=d({...t.query,f:"json",...c,...r(o,c)});return e(t.path+"/queryRelatedRecords",{...i,query:{...i.query,...l}})}async function n(e,t,d){t=o.from(t);return async function s(e,t,o){const i=await a(e,t,o),c=i.data,d=c.geometryType,l=c.spatialReference,y={};for(const f of c.relatedRecordGroups){const e={fields:void 0,objectIdFieldName:void 0,geometryType:d,spatialReference:l,hasZ:!!c.hasZ,hasM:!!c.hasM,features:f.relatedRecords};if(null!=f.objectId)y[f.objectId]=e;else for(const t of Object.keys(f))"relatedRecords"!==t&&(y[f[t]]=e)}return{...i,data:y}}(i(e),t,d).then((e=>{const t=e.data,o={};return Object.keys(t).forEach((e=>o[e]=c.fromJSON(t[e]))),o}))}async function u(e,t,c){t=o.from(t);return async function n$1(e,t,o){const i=await a(e,t,o,{returnCountOnly:!0}),c=i.data,d={};for(const l of c.relatedRecordGroups)null!=l.objectId&&(d[l.objectId]=l.count);return{...i,data:d}}(i(e),t,{...c}).then((e=>e.data))}export{n as executeRelationshipQuery,u as executeRelationshipQueryForCount};
