import{e,S as s,aj as t,v as l,ak as i,al as o,am as a,an as n,ao as r,V as h,ap as y,aq as c,y as b,a as p,ar as d}from"./index-DSIPxOWi.js";const g=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let u=class extends s{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=g.map((e=>new t({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=this.getTiles(),s=new Array,t=new Set((this._labels.size,this._labels.keys()));e.forEach(((b,p)=>{const g=b.lij.toString();t.delete(g);const u=b.lij[0],w=b.geometry;if(this.enablePolygons&&!this._polygons.has(g)){const e=new l({geometry:w,symbol:this._symbols[u%this._symbols.length]});this._polygons.set(g,e),s.push(e)}if(this.enableLabels){const t=(e=>{if(null!=e.label)return e.label;let s=e.lij.toString();return null!=e.loadPriority&&(s+=` (${e.loadPriority})`),s})(b),u=p/(e.length-1),_=d(0,200,u),m=d(20,6,u)/.75,v=null!=b.loadPriority&&b.loadPriority>=e.length,f=new i([_,v?0:_,v?0:_]),S="3d"===this.view.type?()=>new o({verticalOffset:new a({screenLength:40/.75}),callout:new n({color:new i("white"),border:new r({color:new i("black")})}),symbolLayers:new h([new y({text:t,halo:{color:"white",size:1/.75},material:{color:f},size:m})])}):()=>new c({text:t,haloColor:"white",haloSize:1/.75,color:f,size:m}),x=this._labels.get(g);if(x){const e=S();null!=x.symbol&&JSON.stringify(e)===JSON.stringify(x.symbol)||(x.symbol=e)}else{const e=new l({geometry:w.extent.center,symbol:S()});this._labels.set(g,e),s.push(e)}}}));const b=new Array;t.forEach((e=>{const s=this._polygons.get(e);null!=s&&(b.push(s),this._polygons.delete(e));const t=this._labels.get(e);null!=t&&(b.push(t),this._labels.delete(e))})),this.view.graphics.removeMany(b),this.view.graphics.addMany(s)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([b({constructOnly:!0})],u.prototype,"view",void 0),e([b({readOnly:!0})],u.prototype,"updating",void 0),e([b()],u.prototype,"enabled",null),u=e([p("esri.views.support.TileTreeDebugger")],u);export{u as d};
