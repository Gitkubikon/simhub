const __vite__fileDeps=["assets/ElevationQuery-BMwebHth.js","assets/index-DSIPxOWi.js","assets/index-B_7YxLDX.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
import{em as e,en as t,eo as r,ep as i,eq as a,t as o,b as s,er as l,bZ as n,es as p,_ as d,b3 as c,e as y,y as h,et as u,eu as v,ev as m,a as g,Z as w}from"./index-DSIPxOWi.js";import{s as T,a as f}from"./LercDecoder-Bc-3KfiY.js";import"./WorkerHandle-Bq2affGI.js";let b=class extends(e(t(r(i(a(w)))))){constructor(...e){super(...e),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=T()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this._lercDecoder=o(this._lercDecoder)}readCapabilities(e,t){const r=t.capabilities&&t.capabilities.split(",").map((e=>e.toLowerCase().trim()));return r?{operations:{supportsTileMap:r.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(e,t){let r=t.currentVersion;return r||(r=9.3),r}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords)for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new s("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(l).then((()=>this._fetchImageService(t)))),Promise.resolve(this)}fetchTile(e,t,r,i){const a=null!=(i=i||{signal:null}).signal?i.signal:i.signal=(new AbortController).signal,o={responseType:"array-buffer",signal:a},s={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,r,i))).then((()=>n(this.getTileUrl(e,t,r),o))).then((e=>this._lercDecoder.decode(e.data,s,a))).then((e=>new f(e)))}getTileUrl(e,t,r){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,a=p({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${r}${a?"?"+a:""}`}async queryElevation(e,t){const{ElevationQuery:r}=await d((()=>import("./ElevationQuery-BMwebHth.js")),__vite__mapDeps([0,1,2]));return c(t),(new r).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:r}=await d((()=>import("./ElevationQuery-BMwebHth.js")),__vite__mapDeps([0,1,2]));return c(t),(new r).createSampler(this,e,t)}_fetchTileAvailability(e,t,r,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,r,i):Promise.resolve("unknown")}async _fetchImageService(e){var t;if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},i=await n(this.parsedUrl.path,r);i.ssl&&(this.url=null==(t=this.url)?void 0:t.replace(/^http:/i,"https:")),this.sourceJSON=i.data,this.read(i.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[S]}};y([h({readOnly:!0})],b.prototype,"capabilities",void 0),y([u("service","capabilities",["capabilities"])],b.prototype,"readCapabilities",null),y([h({json:{read:{source:"copyrightText"}}})],b.prototype,"copyright",void 0),y([h({readOnly:!0,type:v})],b.prototype,"heightModelInfo",void 0),y([h({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],b.prototype,"path",void 0),y([h({type:["show","hide"]})],b.prototype,"listMode",void 0),y([h({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],b.prototype,"minScale",void 0),y([h({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],b.prototype,"maxScale",void 0),y([h({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],b.prototype,"opacity",void 0),y([h({type:["ArcGISTiledElevationServiceLayer"]})],b.prototype,"operationalLayerType",void 0),y([h()],b.prototype,"sourceJSON",void 0),y([h({json:{read:!1},value:"elevation",readOnly:!0})],b.prototype,"type",void 0),y([h(m)],b.prototype,"url",void 0),y([h()],b.prototype,"version",void 0),y([u("version",["currentVersion"])],b.prototype,"readVersion",null),b=y([g("esri.layers.ElevationLayer")],b);const S=Symbol("default-fetch-tile");b.prototype.fetchTile[S]=!0;const _=b;export{_ as default};
