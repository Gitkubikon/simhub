import{ig as e,ib as r,I as i,fP as n,ih as o,ic as a,fj as h,ii as l,ij as g,ik as b}from"./index-DSIPxOWi.js";import{t as P}from"./pbfQueryUtils-DUjEbwA9.js";import"./pbf-B53Txr8m.js";function u(e,r){return r}function d(e,r,i,n){switch(i){case 0:return f(e,r+n,0);case 1:return"lowerLeft"===e.originPosition?f(e,r+n,1):function y({translate:e,scale:r},i,n){return e[n]-i*r[n]}(e,r+n,1)}}function p(e,r,i,n){return 2===i?f(e,r,2):d(e,r,i,n)}function c(e,r,i,n){return 2===i?f(e,r,3):d(e,r,i,n)}function m(e,r,i,n){return 3===i?f(e,r,3):p(e,r,i,n)}function f({translate:e,scale:r},i,n){return e[n]+i*r[n]}class _{constructor(e){this._options=e,this.geometryTypes=["point","multipoint","polyline","polygon"],this._previousCoordinate=[0,0],this._transform=null,this._applyTransform=u,this._lengths=[],this._currentLengthIndex=0,this._toAddInCurrentPath=0,this._vertexDimension=0,this._coordinateBuffer=null,this._coordinateBufferPtr=0,this._attributesConstructor=class{},this._missingAttributes=[]}get missingAttributes(){return this._missingAttributes}createFeatureResult(){return new e}finishFeatureResult(e){if(this._options.applyTransform&&(e.transform=null),this._attributesConstructor=class{},this._coordinateBuffer=null,this._lengths.length=0,!e.hasZ)return;const i=r(e.geometryType,this._options.sourceSpatialReference,e.spatialReference);if(null!=i)for(const r of e.features)i(r.geometry)}createSpatialReference(){return new i}addField(e,r){e.fields.push(n.fromJSON(r));const i=e.fields.map((e=>e.name));this._attributesConstructor=function(){for(const e of i)this[e]=null}}addFeature(e,r){const i=this._options.maxStringAttributeLength,n=this._options.maxStringAttributeFields;o(r.attributes,n,i,(i=>{const n=r.attributes[e.objectIdFieldName];null!=n&&this._missingAttributes.push({objectId:n,attribute:i})})),e.features.push(r)}addQueryGeometry(e,r){const{queryGeometry:i,queryGeometryType:n}=r,o=a(i.clone(),i,!1,!1,this._transform),l=h(o,n,!1,!1);let g=null;switch(n){case"esriGeometryPoint":g="point";break;case"esriGeometryPolygon":g="polygon";break;case"esriGeometryPolyline":g="polyline";break;case"esriGeometryMultipoint":g="multipoint"}l.type=g,e.queryGeometryType=n,e.queryGeometry=l}prepareFeatures(e){switch(this._transform=e.transform??null,this._options.applyTransform&&e.transform&&(this._applyTransform=this._deriveApplyTransform(e)),this._vertexDimension=2,e.hasZ&&this._vertexDimension++,e.hasM&&this._vertexDimension++,e.geometryType){case"point":this.addCoordinate=(e,r,i)=>this.addCoordinatePoint(e,r,i),this.createGeometry=e=>this.createPointGeometry(e);break;case"polygon":this.addCoordinate=(e,r,i)=>this._addCoordinatePolygon(e,r,i),this.createGeometry=e=>this._createPolygonGeometry(e);break;case"polyline":this.addCoordinate=(e,r,i)=>this._addCoordinatePolyline(e,r,i),this.createGeometry=e=>this._createPolylineGeometry(e);break;case"multipoint":this.addCoordinate=(e,r,i)=>this._addCoordinateMultipoint(e,r,i),this.createGeometry=e=>this._createMultipointGeometry(e);break;case"mesh":case"extent":break;default:l(e.geometryType)}}createFeature(){return this._lengths.length=0,this._currentLengthIndex=0,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0,new g(b(),null,new this._attributesConstructor)}allocateCoordinates(){const e=this._lengths.reduce(((e,r)=>e+r),0);this._coordinateBuffer=new Float64Array(e*this._vertexDimension),this._coordinateBufferPtr=0}addLength(e,r){0===this._lengths.length&&(this._toAddInCurrentPath=r),this._lengths.push(r)}createPointGeometry(e){const r={type:"point",x:0,y:0,spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM};return r.hasZ&&(r.z=0),r.hasM&&(r.m=0),r}addCoordinatePoint(e,r,i){const n=this._transform?this._applyTransform(this._transform,r,i,0):r;if(null!=n)switch(i){case 0:e.x=n;break;case 1:e.y=n;break;case 2:e.hasZ?e.z=n:e.m=n;break;case 3:e.m=n}}_transformPathLikeValue(e,r){let i=0;return r<=1&&(i=this._previousCoordinate[r],this._previousCoordinate[r]+=e),this._transform?this._applyTransform(this._transform,e,r,i):e}_addCoordinatePolyline(e,r,i){this._dehydratedAddPointsCoordinate(e.paths,r,i)}_addCoordinatePolygon(e,r,i){this._dehydratedAddPointsCoordinate(e.rings,r,i)}_addCoordinateMultipoint(e,r,i){0===i&&e.points.push([]);const n=this._transformPathLikeValue(r,i);e.points[e.points.length-1].push(n)}_createPolygonGeometry(e){return{type:"polygon",rings:[[]],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_createPolylineGeometry(e){return{type:"polyline",paths:[[]],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_createMultipointGeometry(e){return{type:"multipoint",points:[],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_dehydratedAddPointsCoordinate(e,r,i){0===i&&0==this._toAddInCurrentPath--&&(e.push([]),this._toAddInCurrentPath=this._lengths[++this._currentLengthIndex]-1,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0);const n=this._transformPathLikeValue(r,i),o=e[e.length-1],a=this._coordinateBuffer;if(a){if(0===i){const e=this._coordinateBufferPtr*Float64Array.BYTES_PER_ELEMENT;o.push(new Float64Array(a.buffer,e,this._vertexDimension))}a[this._coordinateBufferPtr++]=n}}_deriveApplyTransform(e){const{hasZ:r,hasM:i}=e;return r&&i?m:r?p:i?c:d}}class t{_parseFeatureQuery(e){var r;const i=new _(e.options),n=P(e.buffer,i),o={...n,spatialReference:null==(r=n.spatialReference)?void 0:r.toJSON(),fields:n.fields?n.fields.map((e=>e.toJSON())):void 0,missingAttributes:i.missingAttributes};return Promise.resolve(o)}}function s(){return new t}export{s as default};
