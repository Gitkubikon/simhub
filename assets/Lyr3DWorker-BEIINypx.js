import{u as s}from"./ILyr3DWasmPerSceneView-Cbzithql.js";import{e as t}from"./Lyr3DModule-BbMpFjW9.js";import"./index-DSIPxOWi.js";let e,n;async function r(t){if(await o(),t.inputs.length<1)return{result:{status:s.Failed,error:"",jobDescJson:"",data:new Uint8Array(0),missingInputUrls:[]},transferList:[]};const e={ptrs:[],sizes:[]};for(const s of t.inputs){const t=n._malloc(s.byteLength);new Uint8Array(n.HEAPU8.buffer,t,s.byteLength).set(new Uint8Array(s)),e.ptrs.push(t),e.sizes.push(s.byteLength)}const a=n.process(t.jobDescJson,e,t.isMissingResourceCase),u=a.status===s.Succeeded&&a.data,l=a.status===s.MissingInputs&&a.missingInputUrls.length>0;if(u){const s=a.data.slice();a.data=s}else l&&(a.jobDescJson=a.jobDescJson.slice(0),a.originalInputs=t.inputs);for(let s=0;s<e.ptrs.length;++s)n._free(e.ptrs[s]);const c=[];if(u)c.push(a.data.buffer);else if(l)for(const s of t.inputs)c.push(s);return{result:a,transferList:c}}function i(){n&&(n.uninitialize_lyr3d_worker_wasm(),n=null)}function o(){return n?Promise.resolve():(e||(e=t().then((s=>{n=s,n.initialize_lyr3d_worker_wasm(),e=null}))),e)}export{i as destroyWasm,o as initialize,r as process};
