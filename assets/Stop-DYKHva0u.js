import{oZ as t,g1 as a,v as l,e as u,y as p,ax as d,iP as m,p0 as c,a as y,bk as T,et as h,aw as v,bj as f,j as S,c8 as g}from"./index-DSIPxOWi.js";const N={esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriUnknownUnits:"unknown",esriYards:"yards"},A=t()(N);t()({...N,esriIntFeet:"international-feet",esriIntInches:"international-inches",esriIntMiles:"international-miles",esriIntNauticalMiles:"international-nautical-miles",esriIntYards:"international-yards"}),t()({esriAcres:"international-acres",esriAcresUS:"us-acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-international-feet",esriSquareFeetUS:"square-us-feet",esriSquareInches:"square-international-inches",esriSquareInchesUS:"square-us-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-international-miles",esriSquareMilesUS:"square-us-miles",esriSquareMillimeters:"square-millimeters",esriSquareYards:"square-international-yards",esriSquareYardsUS:"square-us-yards",esriUnknownAreaUnits:"unknown"});const D=t()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"});t()({esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds"});const O=t()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards",esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds",esriNAUKilometersPerHour:"kilometers-per-hour",esriNAUMilesPerHour:"miles-per-hour",esriNAUUnknown:"unknown"}),C=t()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTFeatureSets:"featuresets",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),w=t()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"});t()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"});const I=t()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"});t()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),t()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"});const j=t()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"}),F=t()({0:"either-side-of-vehicle",1:"right-side-of-vehicle",2:"left-side-of-vehicle",3:"no-u-turn"},{useNumericKeys:!0}),U=t()({0:"stop",1:"waypoint",2:"break"},{useNumericKeys:!0}),M=t()({0:"ok",1:"not-located",2:"network-element-not-located",3:"element-not-traversable",4:"invalid-field-values",5:"not-reached",6:"time-window-violation",7:"not-located-on-closest"},{useNumericKeys:!0}),E=t()({1:"right",2:"left"},{useNumericKeys:!0}),W=t()({0:"restriction",1:"scaled-cost",2:"added-cost"},{useNumericKeys:!0}),k=t()({0:"permit",1:"restrict"},{useNumericKeys:!0}),L=t()({1:"header",50:"arrive",51:"depart",52:"straight",100:"on-ferry",101:"off-ferry",102:"central-fork",103:"roundabout",104:"u-turn",150:"door",151:"stairs",152:"elevator",153:"escalator",154:"pedestrian-ramp",200:"left-fork",201:"left-ramp",202:"clockwise-roundabout",203:"left-handed-u-turn",204:"bear-left",205:"left-turn",206:"sharp-left",207:"left-turn-and-immediate-left-turn",208:"left-turn-and-immediate-right-turn",300:"right-fork",301:"right-ramp",302:"counter-clockwise-roundabout",303:"right-handed-u-turn",304:"bear-right",305:"right-turn",306:"sharp-right",307:"right-turn-and-immediate-left-turn",308:"right-turn-and-immediate-right-turn",400:"up-elevator",401:"up-escalator",402:"up-stairs",500:"down-elevator",501:"down-escalator",502:"down-stairs",1e3:"general-event",1001:"landmark",1002:"time-zone-change",1003:"traffic-event",1004:"scaled-cost-barrier-event",1005:"boundary-crossing",1006:"restriction-violation",1007:"lane"},{useNumericKeys:!0}),J=t()({0:"unknown",1:"segment",2:"maneuver-segment",3:"restriction-violation",4:"scaled-cost-barrier",5:"heavy-traffic",6:"slow-traffic",7:"moderate-traffic"},{useNumericKeys:!0}),B=t()({"NA Campus":"campus","NA Desktop":"desktop","NA Navigation":"navigation"}),P=t()({Kilometers:"kilometers",Miles:"miles",Meters:"meters"},{ignoreUnknown:!1}),R=t()({Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),V=t()({Kilometers:"kilometers",Miles:"miles",Meters:"meters",Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),x=t()({"Any Hazmat Prohibited":"any-hazmat-prohibited","Avoid Carpool Roads":"avoid-carpool-roads","Avoid Express Lanes":"avoid-express-lanes","Avoid Ferries":"avoid-ferries","Avoid Gates":"avoid-gates","Avoid Limited Access Roads":"avoid-limited-access-roads","Avoid Private Roads":"avoid-private-roads","Avoid Roads Unsuitable for Pedestrians":"avoid-roads-unsuitable-for-pedestrians","Avoid Stairways":"avoid-stairways","Avoid Toll Roads":"avoid-toll-roads","Avoid Toll Roads for Trucks":"avoid-toll-roads-for-trucks","Avoid Truck Restricted Roads":"avoid-truck-restricted-roads","Avoid Unpaved Roads":"avoid-unpaved-roads","Axle Count Restriction":"axle-count-restriction","Driving a Bus":"driving-a-bus","Driving a Taxi":"driving-a-taxi","Driving a Truck":"driving-a-truck","Driving an Automobile":"driving-an-automobile","Driving an Emergency Vehicle":"driving-an-emergency-vehicle","Height Restriction":"height-restriction","Kingpin to Rear Axle Length Restriction":"kingpin-to-rear-axle-length-restriction","Length Restriction":"length-restriction","Preferred for Pedestrians":"preferred-for-pedestrians","Riding a Motorcycle":"riding-a-motorcycle","Roads Under Construction Prohibited":"roads-under-construction-prohibited","Semi or Tractor with One or More Trailers Prohibited":"semi-or-tractor-with-one-or-more-trailers-prohibited","Single Axle Vehicles Prohibited":"single-axle-vehicles-prohibited","Tandem Axle Vehicles Prohibited":"tandem-axle-vehicles-prohibited","Through Traffic Prohibited":"through-traffic-prohibited","Truck with Trailers Restriction":"truck-with-trailers-restriction","Use Preferred Hazmat Routes":"use-preferred-hazmat-routes","Use Preferred Truck Routes":"use-preferred-truck-routes",Walking:"walking","Weight Restriction":"weight-restriction"},{ignoreUnknown:!1}),q=t()({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),_=t()({esriGeometryPoint:"point",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"envelope",esriGeometryMultipoint:"multipoint"}),G=t()({esriNAUTCost:"cost",esriNAUTDescriptor:"descriptor",esriNAUTRestriction:"restriction",esriNAUTHierarchy:"hierarchy"}),K=t()({esriDSTAltName:"alt-name",esriDSTArrive:"arrive",esriDSTBranch:"branch",esriDSTCrossStreet:"cross-street",esriDSTCumulativeLength:"cumulative-length",esriDSTDepart:"depart",esriDSTEstimatedArrivalTime:"estimated-arrival-time",esriDSTExit:"exit",esriDSTGeneral:"general",esriDSTLength:"length",esriDSTServiceTime:"service-time",esriDSTStreetName:"street-name",esriDSTSummary:"summary",esriDSTTime:"time",esriDSTTimeWindow:"time-window",esriDSTToward:"toward",esriDSTViolationTime:"violation-time",esriDSTWaitTime:"wait-time"});var z;let H=z=class extends(a(T)){constructor(t){super(t),this.directionLineType=null,this.directionPointId=null,this.distance=null,this.duration=null,this.fromLevel=null,this.geometry=null,this.objectId=null,this.popupTemplate=null,this.symbol=null,this.toLevel=null,this.type="direction-line"}static fromGraphic(t){return new z({directionLineType:J.fromJSON(t.attributes.DirectionLineType),directionPointId:t.attributes.DirectionPointID,distance:t.attributes.Meters,duration:t.attributes.Minutes,fromLevel:t.attributes.FromLevel??null,geometry:t.geometry,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,symbol:t.symbol,toLevel:t.attributes.ToLevel??null})}toGraphic(){const t={ObjectID:this.objectId,DirectionLineType:null!=this.directionLineType?J.toJSON(this.directionLineType):null,DirectionPointID:this.directionPointId,Meters:this.distance,Minutes:this.duration};return null!=this.fromLevel&&(t.FromLevel=this.fromLevel),null!=this.toLevel&&(t.ToLevel=this.toLevel),new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};H.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"DirectionLineType",alias:"Line Type",type:"esriFieldTypeInteger"},{name:"DirectionPointID",alias:"Direction Point ID",type:"esriFieldTypeInteger"},{name:"FromLevel",alias:"From Level",type:"esriFieldTypeInteger"},{name:"Meters",alias:"Meters",type:"esriFieldTypeDouble"},{name:"Minutes",alias:"Minutes",type:"esriFieldTypeDouble"},{name:"ToLevel",alias:"To Level",type:"esriFieldTypeInteger"}],u([p({type:J.apiValues,json:{read:{source:"attributes.DirectionLineType",reader:J.read}}})],H.prototype,"directionLineType",void 0),u([p({json:{read:{source:"attributes.DirectionPointID"}}})],H.prototype,"directionPointId",void 0),u([p({json:{read:{source:"attributes.Meters"}}})],H.prototype,"distance",void 0),u([p({json:{read:{source:"attributes.Minutes"}}})],H.prototype,"duration",void 0),u([p({json:{read:{source:"attributes.FromLevel"}}})],H.prototype,"fromLevel",void 0),u([p({type:d})],H.prototype,"geometry",void 0),u([p({json:{read:{source:"attributes.ObjectID"}}})],H.prototype,"objectId",void 0),u([p({type:m})],H.prototype,"popupTemplate",void 0),u([p({types:c})],H.prototype,"symbol",void 0),u([p({json:{read:{source:"attributes.ToLevel"}}})],H.prototype,"toLevel",void 0),u([p({readOnly:!0,json:{read:!1}})],H.prototype,"type",void 0),H=z=u([y("esri.rest.support.DirectionLine")],H);const Y=H;var Z;let X=Z=class extends(a(T)){constructor(t){super(t),this.alternateName=null,this.arrivalTime=null,this.arrivalTimeOffset=null,this.azimuth=null,this.branchName=null,this.directionPointType=null,this.displayText=null,this.exitName=null,this.geometry=null,this.intersectingName=null,this.level=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sequence=null,this.shortVoiceInstruction=null,this.stopId=null,this.symbol=null,this.towardName=null,this.type="direction-point",this.voiceInstruction=null}readArrivalTime(t,a){return null!=a.attributes.ArrivalTime?new Date(a.attributes.ArrivalTime):null}static fromGraphic(t){return new Z({alternateName:t.attributes.AlternateName??null,arrivalTime:null!=t.attributes.ArrivalTime?new Date(t.attributes.ArrivalTime):null,arrivalTimeOffset:t.attributes.ArrivalUTCOffset??null,azimuth:t.attributes.Azimuth??null,branchName:t.attributes.BranchName??null,directionPointType:L.fromJSON(t.attributes.DirectionPointType),displayText:t.attributes.DisplayText??null,exitName:t.attributes.ExitName??null,geometry:t.geometry,intersectingName:t.attributes.IntersectingName??null,level:t.attributes.Level??null,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,sequence:t.attributes.Sequence,shortVoiceInstruction:t.attributes.ShortVoiceInstruction??null,stopId:t.attributes.StopID??null,symbol:t.symbol,towardName:t.attributes.TowardName??null,voiceInstruction:t.attributes.VoiceInstruction??null})}toGraphic(){const t={ObjectID:this.objectId,DirectionPointType:null!=this.directionPointType?L.toJSON(this.directionPointType):null,Sequence:this.sequence,StopID:this.stopId};return null!=this.alternateName&&(t.AlternateName=this.alternateName),null!=this.arrivalTime&&(t.ArrivalTime=this.arrivalTime.getTime()),null!=this.arrivalTimeOffset&&(t.ArrivalUTCOffset=this.arrivalTimeOffset),null!=this.azimuth&&(t.Azimuth=this.azimuth),null!=this.branchName&&(t.BranchName=this.branchName),null!=this.displayText&&(t.DisplayText=this.displayText),null!=this.exitName&&(t.ExitName=this.exitName),null!=this.intersectingName&&(t.IntersectingName=this.intersectingName),null!=this.level&&(t.Level=this.level),null!=this.name&&(t.Name=this.name),null!=this.shortVoiceInstruction&&(t.ShortVoiceInstruction=this.shortVoiceInstruction),null!=this.towardName&&(t.TowardName=this.towardName),null!=this.voiceInstruction&&(t.VoiceInstruction=this.voiceInstruction),new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};X.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AlternateName",alias:"Alternative Name",type:"esriFieldTypeString"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time Offset",type:"esriFieldTypeInteger"},{name:"Azimuth",alias:"Azimuth",type:"esriFieldTypeDouble"},{name:"BranchName",alias:"Branch Name",type:"esriFieldTypeString"},{name:"DirectionPointType",alias:"Directions Point Type",type:"esriFieldTypeInteger"},{name:"DisplayText",alias:"Display Text",type:"esriFieldTypeString"},{name:"ExitName",alias:"Exit Name",type:"esriFieldTypeString"},{name:"IntersectingName",alias:"Intersecting Name",type:"esriFieldTypeString"},{name:"Level",alias:"Level",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ShortVoiceInstruction",alias:"Short Voice Instruction",type:"esriFieldTypeString"},{name:"StopID",alias:"Stop ID",type:"esriFieldTypeInteger"},{name:"TowardName",alias:"Toward Name",type:"esriFieldTypeString"},{name:"VoiceInstruction",alias:"Voice Instruction",type:"esriFieldTypeString"}],u([p({json:{read:{source:"attributes.AlternateName"}}})],X.prototype,"alternateName",void 0),u([p()],X.prototype,"arrivalTime",void 0),u([h("arrivalTime",["attributes.ArrivalTime"])],X.prototype,"readArrivalTime",null),u([p({json:{read:{source:"attributes.ArrivalUTCOffset"}}})],X.prototype,"arrivalTimeOffset",void 0),u([p({json:{read:{source:"attributes.Azimuth"}}})],X.prototype,"azimuth",void 0),u([p({json:{read:{source:"attributes.BranchName"}}})],X.prototype,"branchName",void 0),u([p({type:L.apiValues,json:{read:{source:"attributes.DirectionPointType",reader:L.read}}})],X.prototype,"directionPointType",void 0),u([p({json:{read:{source:"attributes.DisplayText"}}})],X.prototype,"displayText",void 0),u([p({json:{read:{source:"attributes.ExitName"}}})],X.prototype,"exitName",void 0),u([p({type:v})],X.prototype,"geometry",void 0),u([p({json:{read:{source:"attributes.IntersectingName"}}})],X.prototype,"intersectingName",void 0),u([p()],X.prototype,"level",void 0),u([p({json:{read:{source:"attributes.Name"}}})],X.prototype,"name",void 0),u([p({json:{read:{source:"attributes.ObjectID"}}})],X.prototype,"objectId",void 0),u([p({type:m})],X.prototype,"popupTemplate",void 0),u([p({json:{read:{source:"attributes.Sequence"}}})],X.prototype,"sequence",void 0),u([p({json:{read:{source:"attributes.ShortVoiceInstruction"}}})],X.prototype,"shortVoiceInstruction",void 0),u([p({json:{read:{source:"attributes.StopID"}}})],X.prototype,"stopId",void 0),u([p({types:c})],X.prototype,"symbol",void 0),u([p({json:{read:{source:"attributes.TowardName"}}})],X.prototype,"towardName",void 0),u([p({readOnly:!0,json:{read:!1}})],X.prototype,"type",void 0),u([p({json:{read:{source:"attributes.VoiceInstruction"}}})],X.prototype,"voiceInstruction",void 0),X=Z=u([y("esri.rest.support.DirectionPoint")],X);const $=X;function r(t,a){if(null==t)return null;const l={},u=new RegExp(`^${a}`,"i");for(const p of Object.keys(t))if(u.test(p)){const u=p.substring(a.length);l[V.fromJSON(u)]=t[p]}return l}function i(t,a,l){if(null!=t){a.attributes||(a.attributes={});for(const u in t){const p=V.toJSON(u);a.attributes[`${l}${p}`]=t[u]}}}function e(t){const a={};for(const l of Object.keys(t)){const u=l;a[V.fromJSON(u)]=t[l]}return a}function s(t){const a={};for(const l of Object.keys(t)){const u=l;a[V.toJSON(u)]=t[l]}return a}function n(t,a){return null==t||null==a?null:Math.round((t-a)/6e4)}function o(t){var a,l,u;const p=t.toJSON(),d=p;return d.accumulateAttributeNames&&(d.accumulateAttributeNames=null==(a=p.accumulateAttributeNames)?void 0:a.join()),d.attributeParameterValues&&(d.attributeParameterValues=JSON.stringify(p.attributeParameterValues)),d.barriers&&(d.barriers=JSON.stringify(p.barriers)),d.outSR&&(d.outSR=null==(l=p.outSR)?void 0:l.wkid),d.overrides&&(d.overrides=JSON.stringify(p.overrides)),d.polygonBarriers&&(d.polygonBarriers=JSON.stringify(p.polygonBarriers)),d.polylineBarriers&&(d.polylineBarriers=JSON.stringify(p.polylineBarriers)),d.restrictionAttributeNames&&(d.restrictionAttributeNames=null==(u=p.restrictionAttributeNames)?void 0:u.join()),d.stops&&(d.stops=JSON.stringify(p.stops)),d.travelMode&&(d.travelMode=JSON.stringify(p.travelMode)),d}var Q;let ee=Q=class extends(a(T)){constructor(t){super(t),this.addedCost=null,this.barrierType=null,this.costs=null,this.curbApproach=null,this.fullEdge=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sideOfEdge=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.type="point-barrier"}readCosts(t,a){return r(a.attributes,"Attr_")}writeCosts(t,a){i(t,a,"Attr_")}static fromGraphic(t){return new Q({addedCost:t.attributes.AddedCost??null,barrierType:null!=t.attributes.BarrierType?W.fromJSON(t.attributes.BarrierType):null,costs:null!=t.attributes.Costs?e(JSON.parse(t.attributes.Costs)):null,curbApproach:null!=t.attributes.CurbApproach?F.fromJSON(t.attributes.CurbApproach):null,fullEdge:null!=t.attributes.FullEdge?k.fromJSON(t.attributes.FullEdge):null,geometry:t.geometry,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,status:null!=t.attributes.Status?M.fromJSON(t.attributes.Status):null,symbol:t.symbol})}toGraphic(){const t={ObjectID:this.objectId,AddedCost:this.addedCost,BarrierType:null!=this.barrierType?W.toJSON(this.barrierType):null,Costs:null!=this.costs?JSON.stringify(s(this.costs)):null,CurbApproach:null!=this.curbApproach?F.toJSON(this.curbApproach):null,FullEdge:null!=this.fullEdge?k.toJSON(this.fullEdge):null,Name:this.name,Status:null!=this.status?M.toJSON(this.status):null};return new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};ee.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AddedCost",alias:"Added Cost",type:"esriFieldTypeDouble"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"FullEdge",alias:"Full Edge",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"}],u([p()],ee.prototype,"addedCost",void 0),u([p({type:W.apiValues,json:{name:"attributes.BarrierType",read:{reader:W.read},write:{writer:W.write}}})],ee.prototype,"barrierType",void 0),u([p()],ee.prototype,"costs",void 0),u([h("costs",["attributes"])],ee.prototype,"readCosts",null),u([f("costs")],ee.prototype,"writeCosts",null),u([p({constructOnly:!0,type:F.apiValues,json:{read:{source:"attributes.CurbApproach",reader:F.read}}})],ee.prototype,"curbApproach",void 0),u([p({type:k.apiValues,json:{name:"attributes.FullEdge",read:{reader:k.read},write:{writer:k.write}}})],ee.prototype,"fullEdge",void 0),u([p({type:v,json:{write:!0}})],ee.prototype,"geometry",void 0),u([p({json:{name:"attributes.Name"}})],ee.prototype,"name",void 0),u([p({json:{name:"attributes.ObjectID"}})],ee.prototype,"objectId",void 0),u([p({type:m})],ee.prototype,"popupTemplate",void 0),u([p({type:E.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:E.read}}})],ee.prototype,"sideOfEdge",void 0),u([p({json:{read:{source:"attributes.SourceID"}}})],ee.prototype,"sourceId",void 0),u([p({json:{read:{source:"attributes.SourceOID"}}})],ee.prototype,"sourceOid",void 0),u([p({type:M.apiValues,json:{read:{source:"attributes.Status",reader:M.read}}})],ee.prototype,"status",void 0),u([p({types:c})],ee.prototype,"symbol",void 0),u([p({readOnly:!0,json:{read:!1}})],ee.prototype,"type",void 0),ee=Q=u([y("esri.rest.support.PointBarrier")],ee);const te=ee;var ie;let re=ie=class extends(a(T)){constructor(t){super(t),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polygon-barrier"}readCosts(t,a){return r(a.attributes,"Attr_")}writeCosts(t,a){i(t,a,"Attr_")}static fromGraphic(t){return new ie({barrierType:null!=t.attributes.BarrierType?W.fromJSON(t.attributes.BarrierType):null,costs:null!=t.attributes.Costs?e(JSON.parse(t.attributes.Costs)):null,geometry:t.geometry,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,scaleFactor:t.attributes.ScaleFactor??null,symbol:t.symbol})}toGraphic(){const t={ObjectID:this.objectId,BarrierType:null!=this.barrierType?W.toJSON(this.barrierType):null,Costs:null!=this.costs?JSON.stringify(s(this.costs)):null,Name:this.name??null,ScaleFactor:this.scaleFactor??null};return new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};re.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],u([p({type:W.apiValues,json:{name:"attributes.BarrierType",read:{reader:W.read},write:{writer:W.write}}})],re.prototype,"barrierType",void 0),u([p()],re.prototype,"costs",void 0),u([h("costs",["attributes"])],re.prototype,"readCosts",null),u([f("costs")],re.prototype,"writeCosts",null),u([p({type:S,json:{write:!0}})],re.prototype,"geometry",void 0),u([p({json:{name:"attributes.Name"}})],re.prototype,"name",void 0),u([p({json:{name:"attributes.ObjectID"}})],re.prototype,"objectId",void 0),u([p({type:m})],re.prototype,"popupTemplate",void 0),u([p()],re.prototype,"scaleFactor",void 0),u([p({types:c})],re.prototype,"symbol",void 0),u([p({readOnly:!0,json:{read:!1}})],re.prototype,"type",void 0),re=ie=u([y("esri.rest.support.PolygonBarrier")],re);const se=re;var ae;let oe=ae=class extends(a(T)){constructor(t){super(t),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polyline-barrier"}readCosts(t,a){return r(a.attributes,"Attr_")}static fromGraphic(t){return new ae({barrierType:null!=t.attributes.BarrierType?W.fromJSON(t.attributes.BarrierType):null,costs:null!=t.attributes.Costs?e(JSON.parse(t.attributes.Costs)):null,geometry:t.geometry,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,scaleFactor:t.attributes.ScaleFactor??null,symbol:t.symbol})}toGraphic(){const t={ObjectID:this.objectId,BarrierType:null!=this.barrierType?W.toJSON(this.barrierType):null,Costs:null!=this.costs?JSON.stringify(s(this.costs)):null,Name:this.name,ScaleFactor:this.scaleFactor};return new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};oe.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],u([p({type:W.apiValues,json:{read:{source:"attributes.BarrierType",reader:W.read}}})],oe.prototype,"barrierType",void 0),u([p()],oe.prototype,"costs",void 0),u([h("costs",["attributes"])],oe.prototype,"readCosts",null),u([p({type:d,json:{write:!0}})],oe.prototype,"geometry",void 0),u([p({json:{name:"attributes.Name"}})],oe.prototype,"name",void 0),u([p({json:{name:"attributes.ObjectID"}})],oe.prototype,"objectId",void 0),u([p({type:m})],oe.prototype,"popupTemplate",void 0),u([p()],oe.prototype,"scaleFactor",void 0),u([p({types:c})],oe.prototype,"symbol",void 0),u([p({readOnly:!0,json:{read:!1}})],oe.prototype,"type",void 0),oe=ae=u([y("esri.rest.support.PolylineBarrier")],oe);const ne=oe;let le=class b extends(a(T)){constructor(t){super(t),this.attributeParameterValues=null,this.description=null,this.distanceAttributeName=null,this.id=null,this.impedanceAttributeName=null,this.name=null,this.restrictionAttributeNames=null,this.simplificationTolerance=null,this.simplificationToleranceUnits=null,this.timeAttributeName=null,this.type=null,this.useHierarchy=null,this.uturnAtJunctions=null}readId(t,a){return a.id??a.itemId??null}readRestrictionAttributes(t,a){const{restrictionAttributeNames:l}=a;return null==l?null:l.map((t=>x.fromJSON(t)))}writeRestrictionAttributes(t,a,l){null!=t&&(a[l]=t.map((t=>x.toJSON(t))))}};u([p({type:[Object],json:{write:!0}})],le.prototype,"attributeParameterValues",void 0),u([p({type:String,json:{write:!0}})],le.prototype,"description",void 0),u([g(P,{ignoreUnknown:!1})],le.prototype,"distanceAttributeName",void 0),u([p({type:String,json:{write:!0}})],le.prototype,"id",void 0),u([h("id",["id","itemId"])],le.prototype,"readId",null),u([g(V,{ignoreUnknown:!1})],le.prototype,"impedanceAttributeName",void 0),u([p({type:String,json:{write:!0}})],le.prototype,"name",void 0),u([p({type:[String],json:{write:!0}})],le.prototype,"restrictionAttributeNames",void 0),u([h("restrictionAttributeNames")],le.prototype,"readRestrictionAttributes",null),u([f("restrictionAttributeNames")],le.prototype,"writeRestrictionAttributes",null),u([p({type:Number,json:{write:{allowNull:!0}}})],le.prototype,"simplificationTolerance",void 0),u([g(A)],le.prototype,"simplificationToleranceUnits",void 0),u([g(R,{ignoreUnknown:!1})],le.prototype,"timeAttributeName",void 0),u([g(j)],le.prototype,"type",void 0),u([p({type:Boolean,json:{write:!0}})],le.prototype,"useHierarchy",void 0),u([g(I)],le.prototype,"uturnAtJunctions",void 0),le=u([y("esri.rest.support.TravelMode")],le);const ue=le;let pe=class extends T{constructor(t){super(t),this.accumulateAttributes=null,this.directionsLanguage=null,this.findBestSequence=null,this.preserveFirstStop=null,this.preserveLastStop=null,this.startTimeIsUTC=null,this.timeWindowsAreUTC=null,this.travelMode=null}readAccumulateAttributes(t){return null==t?null:t.map((t=>V.fromJSON(t)))}writeAccumulateAttributes(t,a,l){(null==t?void 0:t.length)&&(a[l]=t.map((t=>V.toJSON(t))))}};u([p({type:[String],json:{name:"accumulateAttributeNames",write:!0}})],pe.prototype,"accumulateAttributes",void 0),u([h("accumulateAttributes")],pe.prototype,"readAccumulateAttributes",null),u([f("accumulateAttributes")],pe.prototype,"writeAccumulateAttributes",null),u([p({type:String,json:{write:!0}})],pe.prototype,"directionsLanguage",void 0),u([p({type:Boolean,json:{write:!0}})],pe.prototype,"findBestSequence",void 0),u([p({type:Boolean,json:{write:!0}})],pe.prototype,"preserveFirstStop",void 0),u([p({type:Boolean,json:{write:!0}})],pe.prototype,"preserveLastStop",void 0),u([p({type:Boolean,json:{write:!0}})],pe.prototype,"startTimeIsUTC",void 0),u([p({type:Boolean,json:{write:!0}})],pe.prototype,"timeWindowsAreUTC",void 0),u([p({type:ue,json:{write:!0}})],pe.prototype,"travelMode",void 0),pe=u([y("esri.rest.support.RouteSettings")],pe);const de=pe;var me;let ce=me=class extends(a(T)){constructor(t){super(t),this.analysisSettings=null,this.endTime=null,this.endTimeOffset=null,this.firstStopId=null,this.geometry=null,this.lastStopId=null,this.messages=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.startTime=null,this.startTimeOffset=null,this.stopCount=null,this.symbol=null,this.totalCosts=null,this.totalDistance=null,this.totalDuration=null,this.totalLateDuration=null,this.totalViolations=null,this.totalWait=null,this.totalWaitDuration=null,this.type="route-info",this.version="1.0.0"}readEndTime(t,a){return null!=a.attributes.EndTimeUTC?new Date(a.attributes.EndTimeUTC):null}readEndTimeOffset(t,a){return n(a.attributes.EndTime,a.attributes.EndTimeUTC)}readStartTime(t,a){return null!=a.attributes.StartTimeUTC?new Date(a.attributes.StartTimeUTC):null}readStartTimeOffset(t,a){return n(a.attributes.StartTime,a.attributes.StartTimeUTC)}readTotalCosts(t,a){return r(a.attributes,"Total_")}readTotalViolations(t,a){return r(a.attributes,"TotalViolation_")}readTotalWait(t,a){return r(a.attributes,"TotalWait_")}static fromGraphic(t){return new me({analysisSettings:null!=t.attributes.AnalysisSettings?de.fromJSON(JSON.parse(t.attributes.AnalysisSettings)):null,endTime:null!=t.attributes.EndTime?new Date(t.attributes.EndTime):null,endTimeOffset:t.attributes.EndUTCOffset??null,geometry:t.geometry,messages:null!=t.attributes.Messages?JSON.parse(t.attributes.Messages):null,name:t.attributes.RouteName,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,startTime:null!=t.attributes.StartTime?new Date(t.attributes.StartTime):null,startTimeOffset:t.attributes.StartUTCOffset??null,symbol:t.symbol,totalCosts:null!=t.attributes.TotalCosts?e(JSON.parse(t.attributes.TotalCosts)):null,totalDistance:t.attributes.TotalMeters??null,totalDuration:t.attributes.TotalMinutes??null,totalLateDuration:t.attributes.TotalLateMinutes??null,totalWaitDuration:t.attributes.TotalWaitMinutes??null,version:t.attributes.Version})}toGraphic(){const t={ObjectID:this.objectId,AnalysisSettings:null!=this.analysisSettings?JSON.stringify(this.analysisSettings.toJSON()):null,EndTime:null!=this.endTime?this.endTime.getTime():null,EndUTCOffset:this.endTimeOffset,Messages:null!=this.messages?JSON.stringify(this.messages):null,RouteName:this.name,StartTime:null!=this.startTime?this.startTime.getTime():null,StartUTCOffset:this.startTimeOffset,TotalCosts:null!=this.totalCosts?JSON.stringify(s(this.totalCosts)):null,TotalLateMinutes:this.totalLateDuration,TotalMeters:this.totalDistance,TotalMinutes:this.totalDuration,TotalWaitMinutes:this.totalWaitDuration,Version:this.version};return new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};ce.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AnalysisSettings",alias:"Analysis Settings",type:"esriFieldTypeString"},{name:"EndTime",alias:"End Time",type:"esriFieldTypeDate"},{name:"EndUTCOffset",alias:"End Time Offset",type:"esriFieldTypeInteger"},{name:"Messages",alias:"Messages",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"StartTime",alias:"Start Time",type:"esriFieldTypeDate"},{name:"StartUTCOffset",alias:"Start Time Offset",type:"esriFieldTypeInteger"},{name:"TotalCosts",alias:"Total Costs",type:"esriFieldTypeString"},{name:"TotalLateMinutes",alias:"Total Late Minutes",type:"esriFieldTypeDouble"},{name:"TotalMeters",alias:"Total Meters",type:"esriFieldTypeDouble"},{name:"TotalMinutes",alias:"Total Minutes",type:"esriFieldTypeDouble"},{name:"TotalWaitMinutes",alias:"Total Wait Minutes",type:"esriFieldTypeDouble"},{name:"Version",alias:"Version",type:"esriFieldTypeString"}],u([p()],ce.prototype,"analysisSettings",void 0),u([p()],ce.prototype,"endTime",void 0),u([h("endTime",["attributes.EndTimeUTC"])],ce.prototype,"readEndTime",null),u([p()],ce.prototype,"endTimeOffset",void 0),u([h("endTimeOffset",["attributes.EndTime","attributes.EndTimeUTC"])],ce.prototype,"readEndTimeOffset",null),u([p({json:{read:{source:"attributes.FirstStopID"}}})],ce.prototype,"firstStopId",void 0),u([p({type:d})],ce.prototype,"geometry",void 0),u([p({json:{read:{source:"attributes.LastStopID"}}})],ce.prototype,"lastStopId",void 0),u([p()],ce.prototype,"messages",void 0),u([p({json:{read:{source:"attributes.Name"}}})],ce.prototype,"name",void 0),u([p({json:{read:{source:"attributes.ObjectID"}}})],ce.prototype,"objectId",void 0),u([p({type:m})],ce.prototype,"popupTemplate",void 0),u([p()],ce.prototype,"startTime",void 0),u([h("startTime",["attributes.StartTimeUTC"])],ce.prototype,"readStartTime",null),u([p()],ce.prototype,"startTimeOffset",void 0),u([h("startTimeOffset",["attributes.StartTime","attributes.StartTimeUTC"])],ce.prototype,"readStartTimeOffset",null),u([p({json:{read:{source:"attributes.StopCount"}}})],ce.prototype,"stopCount",void 0),u([p({types:c})],ce.prototype,"symbol",void 0),u([p()],ce.prototype,"totalCosts",void 0),u([h("totalCosts",["attributes"])],ce.prototype,"readTotalCosts",null),u([p()],ce.prototype,"totalDistance",void 0),u([p()],ce.prototype,"totalDuration",void 0),u([p()],ce.prototype,"totalLateDuration",void 0),u([p()],ce.prototype,"totalViolations",void 0),u([h("totalViolations",["attributes"])],ce.prototype,"readTotalViolations",null),u([p()],ce.prototype,"totalWait",void 0),u([h("totalWait",["attributes"])],ce.prototype,"readTotalWait",null),u([p()],ce.prototype,"totalWaitDuration",void 0),u([p({readOnly:!0,json:{read:!1}})],ce.prototype,"type",void 0),u([p()],ce.prototype,"version",void 0),ce=me=u([y("esri.rest.support.RouteInfo")],ce);const ye=ce;var Te;let be=Te=class extends(a(T)){constructor(t){super(t),this.arriveCurbApproach=null,this.arriveTime=null,this.arriveTimeOffset=null,this.bearing=null,this.bearingTol=null,this.cumulativeCosts=null,this.cumulativeDistance=null,this.cumulativeDuration=null,this.curbApproach=null,this.departCurbApproach=null,this.departTime=null,this.departTimeOffset=null,this.distanceToNetworkInMeters=null,this.geometry=null,this.lateDuration=null,this.locationType=null,this.name=null,this.navLatency=null,this.objectId=null,this.popupTemplate=null,this.posAlong=null,this.routeName=null,this.serviceCosts=null,this.serviceDistance=null,this.serviceDuration=null,this.sequence=null,this.sideOfEdge=null,this.snapX=null,this.snapY=null,this.snapZ=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.timeWindowEnd=null,this.timeWindowEndOffset=null,this.timeWindowStart=null,this.timeWindowStartOffset=null,this.type="stop",this.violations=null,this.waitDuration=null,this.wait=null}readArriveTimeOffset(t,a){return n(a.attributes.ArriveTime,a.attributes.ArriveTimeUTC)}readCumulativeCosts(t,a){return r(a.attributes,"Cumul_")}readDepartTimeOffset(t,a){return n(a.attributes.DepartTime,a.attributes.DepartTimeUTC)}readServiceCosts(t,a){return r(a.attributes,"Attr_")}writeServiceCosts(t,a){i(t,a,"Attr_")}writeTimeWindowEnd(t,a){null!=t&&(a.attributes||(a.attributes={}),a.attributes.TimeWindowEnd=t.getTime())}writeTimeWindowStart(t,a){null!=t&&(a.attributes||(a.attributes={}),a.attributes.TimeWindowStart=t.getTime())}readViolations(t,a){return r(a.attributes,"Violation_")}readWait(t,a){return r(a.attributes,"Wait_")}static fromGraphic(t){return new Te({arriveCurbApproach:null!=t.attributes.ArrivalCurbApproach?F.fromJSON(t.attributes.ArrivalCurbApproach):null,arriveTime:null!=t.attributes.ArrivalTime?new Date(t.attributes.ArrivalTime):null,arriveTimeOffset:t.attributes.ArrivalUTCOffset,cumulativeCosts:null!=t.attributes.CumulativeCosts?e(JSON.parse(t.attributes.CumulativeCosts)):null,cumulativeDistance:t.attributes.CumulativeMeters??null,cumulativeDuration:t.attributes.CumulativeMinutes??null,curbApproach:null!=t.attributes.CurbApproach?F.fromJSON(t.attributes.CurbApproach):null,departCurbApproach:null!=t.attributes.DepartureCurbApproach?F.fromJSON(t.attributes.DepartureCurbApproach):null,departTime:null!=t.attributes.DepartureTime?new Date(t.attributes.DepartureTime):null,departTimeOffset:t.attributes.DepartureUTCOffset??null,geometry:t.geometry,lateDuration:t.attributes.LateMinutes??null,locationType:null!=t.attributes.LocationType?U.fromJSON(t.attributes.LocationType):null,name:t.attributes.Name,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,routeName:t.attributes.RouteName,sequence:t.attributes.Sequence??null,serviceCosts:null!=t.attributes.ServiceCosts?e(JSON.parse(t.attributes.ServiceCosts)):null,serviceDistance:t.attributes.ServiceMeters??null,serviceDuration:t.attributes.ServiceMinutes??null,status:null!=t.attributes.Status?M.fromJSON(t.attributes.Status):null,symbol:t.symbol,timeWindowEnd:null!=t.attributes.TimeWindowEnd?new Date(t.attributes.TimeWindowEnd):null,timeWindowEndOffset:t.attributes.TimeWindowEndUTCOffset??null,timeWindowStart:null!=t.attributes.TimeWindowStart?new Date(t.attributes.TimeWindowStart):null,timeWindowStartOffset:t.attributes.TimeWindowStartUTCOffset??null,waitDuration:t.attributes.WaitMinutes??null})}toGraphic(){const t={ObjectID:this.objectId,ArrivalCurbApproach:null!=this.arriveCurbApproach?F.toJSON(this.arriveCurbApproach):null,ArrivalTime:null!=this.arriveTime?this.arriveTime.getTime():null,ArrivalUTCOffset:this.arriveTimeOffset,CumulativeCosts:null!=this.cumulativeCosts?JSON.stringify(s(this.cumulativeCosts)):null,CumulativeMeters:this.cumulativeDistance,CumulativeMinutes:this.cumulativeDuration,CurbApproach:null!=this.curbApproach?F.toJSON(this.curbApproach):null,DepartureCurbApproach:null!=this.departCurbApproach?F.toJSON(this.departCurbApproach):null,DepartureTime:null!=this.departTime?this.departTime.getTime():null,DepartureUTCOffset:this.departTimeOffset,LateMinutes:this.lateDuration,LocationType:null!=this.locationType?U.toJSON(this.locationType):null,Name:this.name,RouteName:this.routeName,Sequence:this.sequence,ServiceCosts:null!=this.serviceCosts?JSON.stringify(s(this.serviceCosts)):null,ServiceMeters:this.serviceDistance,ServiceMinutes:this.serviceDuration,Status:null!=this.status?M.toJSON(this.status):null,TimeWindowEnd:null!=this.timeWindowEnd?this.timeWindowEnd.getTime():null,TimeWindowEndUTCOffset:this.timeWindowEndOffset??this.arriveTimeOffset,TimeWindowStart:null!=this.timeWindowStart?this.timeWindowStart.getTime():null,TimeWindowStartUTCOffset:this.timeWindowStartOffset??this.arriveTimeOffset,WaitMinutes:this.waitDuration};return new l({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}};be.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"ArrivalCurbApproach",alias:"Arrival Curb Approach",type:"esriFieldTypeInteger"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time",type:"esriFieldTypeInteger"},{name:"CumulativeCosts",alias:"Cumulative Costs",type:"esriFieldTypeString"},{name:"CumulativeMeters",alias:"Cumulative Meters",type:"esriFieldTypeDouble"},{name:"CumulativeMinutes",alias:"Cumulative Minutes",type:"esriFieldTypeDouble"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureCurbApproach",alias:"Departure Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureTime",alias:"Departure Time",type:"esriFieldTypeDate"},{name:"DepartureUTCOffset",alias:"Departure Time",type:"esriFieldTypeInteger"},{name:"LateMinutes",alias:"Minutes Late",type:"esriFieldTypeDouble"},{name:"LocationType",alias:"Location Type",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ServiceCosts",alias:"Service Costs",type:"esriFieldTypeString"},{name:"ServiceMeters",alias:"Service Meters",type:"esriFieldTypeDouble"},{name:"ServiceMinutes",alias:"Service Minutes",type:"esriFieldTypeDouble"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"},{name:"TimeWindowEnd",alias:"Time Window End",type:"esriFieldTypeDate"},{name:"TimeWindowEndUTCOffset",alias:"Time Window End Offset",type:"esriFieldTypeInteger"},{name:"TimeWindowStart",alias:"Time Window Start",type:"esriFieldTypeDate"},{name:"TimeWindowStartUTCOffset",alias:"Time Window Start Offset",type:"esriFieldTypeInteger"},{name:"WaitMinutes",alias:"Minutes Wait",type:"esriFieldTypeDouble"}],u([p({type:F.apiValues,json:{read:{source:"attributes.ArrivalCurbApproach",reader:F.read}}})],be.prototype,"arriveCurbApproach",void 0),u([p({type:Date,json:{read:{source:"attributes.ArriveTimeUTC"}}})],be.prototype,"arriveTime",void 0),u([p()],be.prototype,"arriveTimeOffset",void 0),u([h("arriveTimeOffset",["attributes.ArriveTime","attributes.ArriveTimeUTC"])],be.prototype,"readArriveTimeOffset",null),u([p({json:{name:"attributes.Bearing",read:!1,write:!0}})],be.prototype,"bearing",void 0),u([p({json:{name:"attributes.BearingTol",read:!1,write:!0}})],be.prototype,"bearingTol",void 0),u([p()],be.prototype,"cumulativeCosts",void 0),u([h("cumulativeCosts",["attributes"])],be.prototype,"readCumulativeCosts",null),u([p()],be.prototype,"cumulativeDistance",void 0),u([p()],be.prototype,"cumulativeDuration",void 0),u([p({type:F.apiValues,json:{name:"attributes.CurbApproach",read:{reader:F.read},write:{writer:F.write}}})],be.prototype,"curbApproach",void 0),u([p({type:F.apiValues,json:{read:{source:"attributes.DepartCurbApproach",reader:F.read}}})],be.prototype,"departCurbApproach",void 0),u([p({type:Date,json:{read:{source:"attributes.DepartTimeUTC"}}})],be.prototype,"departTime",void 0),u([p()],be.prototype,"departTimeOffset",void 0),u([h("departTimeOffset",["attributes.DepartTime","attributes.DepartTimeUTC"])],be.prototype,"readDepartTimeOffset",null),u([p({json:{read:{source:"attributes.DistanceToNetworkInMeters"}}})],be.prototype,"distanceToNetworkInMeters",void 0),u([p({type:v,json:{write:!0}})],be.prototype,"geometry",void 0),u([p()],be.prototype,"lateDuration",void 0),u([p({type:U.apiValues,json:{name:"attributes.LocationType",read:{reader:U.read},write:{writer:U.write}}})],be.prototype,"locationType",void 0),u([p({json:{name:"attributes.Name"}})],be.prototype,"name",void 0),u([p({json:{name:"attributes.NavLatency",read:!1,write:!0}})],be.prototype,"navLatency",void 0),u([p({json:{name:"attributes.ObjectID"}})],be.prototype,"objectId",void 0),u([p({type:m})],be.prototype,"popupTemplate",void 0),u([p({json:{read:{source:"attributes.PosAlong"}}})],be.prototype,"posAlong",void 0),u([p({json:{name:"attributes.RouteName"}})],be.prototype,"routeName",void 0),u([p()],be.prototype,"serviceCosts",void 0),u([h("serviceCosts",["attributes"])],be.prototype,"readServiceCosts",null),u([f("serviceCosts")],be.prototype,"writeServiceCosts",null),u([p()],be.prototype,"serviceDistance",void 0),u([p()],be.prototype,"serviceDuration",void 0),u([p({json:{name:"attributes.Sequence"}})],be.prototype,"sequence",void 0),u([p({type:E.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:E.read}}})],be.prototype,"sideOfEdge",void 0),u([p({json:{read:{source:"attributes.SnapX"}}})],be.prototype,"snapX",void 0),u([p({json:{read:{source:"attributes.SnapY"}}})],be.prototype,"snapY",void 0),u([p({json:{read:{source:"attributes.SnapZ"}}})],be.prototype,"snapZ",void 0),u([p({json:{read:{source:"attributes.SourceID"}}})],be.prototype,"sourceId",void 0),u([p({json:{read:{source:"attributes.SourceOID"}}})],be.prototype,"sourceOid",void 0),u([p({type:M.apiValues,json:{read:{source:"attributes.Status",reader:M.read}}})],be.prototype,"status",void 0),u([p({types:c})],be.prototype,"symbol",void 0),u([p({type:Date,json:{name:"attributes.TimeWindowEnd"}})],be.prototype,"timeWindowEnd",void 0),u([f("timeWindowEnd")],be.prototype,"writeTimeWindowEnd",null),u([p()],be.prototype,"timeWindowEndOffset",void 0),u([p({type:Date,json:{name:"attributes.TimeWindowStart"}})],be.prototype,"timeWindowStart",void 0),u([f("timeWindowStart")],be.prototype,"writeTimeWindowStart",null),u([p()],be.prototype,"timeWindowStartOffset",void 0),u([p({readOnly:!0,json:{read:!1}})],be.prototype,"type",void 0),u([p()],be.prototype,"violations",void 0),u([h("violations",["attributes"])],be.prototype,"readViolations",null),u([p()],be.prototype,"waitDuration",void 0),u([p()],be.prototype,"wait",void 0),u([h("wait",["attributes"])],be.prototype,"readWait",null),be=Te=u([y("esri.rest.support.Stop")],be);const he=be;export{te as C,R as D,x as M,K as P,q as R,ye as S,se as T,B as U,V as a,D as b,Y as c,ue as d,o as e,_ as f,w as g,de as h,ne as j,C as l,I as m,n,O as o,G as q,A as r,he as w,$ as y};
