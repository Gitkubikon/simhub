import{g2 as e,g4 as t,g3 as a,gE as r,I as s,az as i,cG as o,bZ as n,b as l,e as p,y as g,a as u,hY as d,Z as y,c7 as h,eo as c,eq as b,aw as m,gF as v}from"./index-DSIPxOWi.js";import{o as w}from"./imageBitmapUtils-CleAXumn.js";var M;const f=new d("0/0/0",0,0,0,void 0);let T=M=class extends(e(t(a(y)))){constructor(){super(...arguments),this.tileInfo=r.create({spatialReference:s.WebMercator,size:256}),this.type="base-tile",this.fullExtent=new i(-20037508.342787,-20037508.34278,20037508.34278,20037508.342787,s.WebMercator),this.spatialReference=s.WebMercator}getTileBounds(e,t,a,r){const s=r||o();return f.level=e,f.row=t,f.col=a,f.extent=s,this.tileInfo.updateTileInfo(f),f.extent=void 0,s}fetchTile(e,t,a,r={}){const{signal:s}=r,i=this.getTileUrl(e,t,a),o={responseType:"image",signal:s,query:{...this.refreshParameters}};return n(i??"",o).then((e=>e.data))}async fetchImageBitmapTile(e,t,a,r={}){const{signal:s}=r;if(this.fetchTile!==M.prototype.fetchTile){const i=await this.fetchTile(e,t,a,r);return w(i,e,t,a,s)}const i=this.getTileUrl(e,t,a)??"",o={responseType:"blob",signal:s,query:{...this.refreshParameters}},{data:l}=await n(i,o);return w(l,e,t,a,s)}getTileUrl(){throw new l("basetilelayer:gettileurl-not-implemented","getTileUrl() is not implemented")}};p([g({type:r})],T.prototype,"tileInfo",void 0),p([g({type:["show","hide"]})],T.prototype,"listMode",void 0),p([g({readOnly:!0,value:"base-tile"})],T.prototype,"type",void 0),p([g({nonNullable:!0})],T.prototype,"fullExtent",void 0),p([g()],T.prototype,"spatialReference",void 0),T=M=p([u("esri.layers.BaseTileLayer")],T);const S=T,j=new h({BingMapsAerial:"aerial",BingMapsRoad:"road",BingMapsHybrid:"hybrid"});let x=class extends(e(c(b(S)))){constructor(e){super(e),this.type="bing-maps",this.tileInfo=new r({size:[256,256],dpi:96,origin:new m({x:-20037508.342787,y:20037508.342787,spatialReference:s.WebMercator}),spatialReference:s.WebMercator,lods:[new v({level:1,resolution:78271.5169639999,scale:295828763.795777}),new v({level:2,resolution:39135.7584820001,scale:147914381.897889}),new v({level:3,resolution:19567.8792409999,scale:73957190.948944}),new v({level:4,resolution:9783.93962049996,scale:36978595.474472}),new v({level:5,resolution:4891.96981024998,scale:18489297.737236}),new v({level:6,resolution:2445.98490512499,scale:9244648.868618}),new v({level:7,resolution:1222.99245256249,scale:4622324.434309}),new v({level:8,resolution:611.49622628138,scale:2311162.217155}),new v({level:9,resolution:305.748113140558,scale:1155581.108577}),new v({level:10,resolution:152.874056570411,scale:577790.554289}),new v({level:11,resolution:76.4370282850732,scale:288895.277144}),new v({level:12,resolution:38.2185141425366,scale:144447.638572}),new v({level:13,resolution:19.1092570712683,scale:72223.819286}),new v({level:14,resolution:9.55462853563415,scale:36111.909643}),new v({level:15,resolution:4.77731426794937,scale:18055.954822}),new v({level:16,resolution:2.38865713397468,scale:9027.977411}),new v({level:17,resolution:1.19432856685505,scale:4513.988705}),new v({level:18,resolution:.597164283559817,scale:2256.994353}),new v({level:19,resolution:.298582141647617,scale:1128.497176}),new v({level:20,resolution:.1492910708238085,scale:564.248588})]}),this.key=null,this.style="road",this.culture="en-US",this.region=null,this.portalUrl=null,this.hasAttributionData=!0}get bingMetadata(){return this._get("bingMetadata")}set bingMetadata(e){this._set("bingMetadata",e)}get copyright(){return null!=this.bingMetadata?this.bingMetadata.copyright:null}get operationalLayerType(){return j.toJSON(this.style)}get bingLogo(){return null!=this.bingMetadata?this.bingMetadata.brandLogoUri:null}load(e){return this.key?this.addResolvingPromise(this._getMetadata()):this.portalUrl?this.addResolvingPromise(this._getPortalBingKey().then((()=>this._getMetadata()))):this.addResolvingPromise(Promise.reject(new l("bingmapslayer:load","Bing layer must have bing key."))),Promise.resolve(this)}getTileUrl(e,t,a){if(!this.loaded||null==this.bingMetadata)return null;const r=this.bingMetadata.resourceSets[0].resources[0],s=r.imageUrlSubdomains[t%r.imageUrlSubdomains.length],i=this._getQuadKey(e,t,a);return r.imageUrl.replace("{subdomain}",s).replace("{quadkey}",i)}async fetchAttributionData(){return this.load().then((()=>null==this.bingMetadata?null:{contributors:this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map((e=>({attribution:e.attribution,coverageAreas:e.coverageAreas.map((e=>({zoomMin:e.zoomMin,zoomMax:e.zoomMax,score:1,bbox:[e.bbox[0],e.bbox[1],e.bbox[2],e.bbox[3]]})))})))}))}_getMetadata(){const e={road:"roadOnDemand",aerial:"aerial",hybrid:"aerialWithLabelsOnDemand"}[this.style];return n(`https://dev.virtualearth.net/REST/v1/Imagery/Metadata/${e}`,{responseType:"json",query:{include:"ImageryProviders",uriScheme:"https",key:this.key,suppressStatus:!0,output:"json",culture:this.culture,userRegion:this.region}}).then((e=>{const t=e.data;if(200!==t.statusCode)throw new l("bingmapslayer:getmetadata",t.statusDescription);if(this.bingMetadata=t,0===this.bingMetadata.resourceSets.length)throw new l("bingmapslayer:getmetadata","no bing resourcesets");if(0===this.bingMetadata.resourceSets[0].resources.length)throw new l("bingmapslayer:getmetadata","no bing resources")})).catch((e=>{throw new l("bingmapslayer:getmetadata",e.message)}))}_getPortalBingKey(){return n(this.portalUrl??"",{responseType:"json",authMode:"no-prompt",query:{f:"json"}}).then((e=>{if(!e.data.bingKey)throw new l("bingmapslayer:getportalbingkey","The referenced Portal does not contain a valid bing key");this.key=e.data.bingKey})).catch((e=>{throw new l("bingmapslayer:getportalbingkey",e.message)}))}_getQuadKey(e,t,a){let r="";for(let s=e;s>0;s--){let e=0;const i=1<<s-1;a&i&&(e+=1),t&i&&(e+=2),r+=e.toString()}return r}};p([g({json:{read:!1,write:!1},value:null})],x.prototype,"bingMetadata",null),p([g({json:{read:!1,write:!1},value:"bing-maps",readOnly:!0})],x.prototype,"type",void 0),p([g({type:r})],x.prototype,"tileInfo",void 0),p([g({type:String,readOnly:!0,json:{read:!1,write:!1}})],x.prototype,"copyright",null),p([g({type:String,json:{write:!1,read:!1}})],x.prototype,"key",void 0),p([g({type:j.apiValues,nonNullable:!0,json:{read:{source:"layerType",reader:j.read}}})],x.prototype,"style",void 0),p([g({type:["BingMapsAerial","BingMapsHybrid","BingMapsRoad"]})],x.prototype,"operationalLayerType",null),p([g({type:String,json:{write:!1,read:!1}})],x.prototype,"culture",void 0),p([g({type:String,json:{write:!1,read:!1}})],x.prototype,"region",void 0),p([g({type:String,json:{write:!0,read:!0}})],x.prototype,"portalUrl",void 0),p([g({type:Boolean,json:{write:!1,read:!1}})],x.prototype,"hasAttributionData",void 0),p([g({type:String,readOnly:!0})],x.prototype,"bingLogo",null),x=p([u("esri.layers.BingMapsLayer")],x);const B=x;export{B as default};
