import{g2 as e,gp as t,g4 as r,en as s,eo as i,ep as a,eq as o,g3 as l,gd as n,gc as p,er as m,by as u,be as d,gq as y,gr as h,bZ as c,az as g,gs as v,gt as b,gu as f,b as x,W as S,e as I,y as j,gv as w,et as O,bj as T,ev as P,a as F,Z as E,gw as L}from"./index-DSIPxOWi.js";import{m as M,f as U,t as R}from"./SublayersOwner-CtZeZB5i.js";import{y as N}from"./ExportImageParameters-Bjx0Q-yu.js";import{t as _}from"./imageBitmapUtils-CleAXumn.js";import{e as q}from"./sublayerUtils-DIUcTD2L.js";import"./QueryTask-D61WShEy.js";import"./infoFor3D-BTCPmnmy.js";import"./executeForIds-vkxYbvNq.js";import"./query-C2USZ63O.js";import"./normalizeUtils-BrH-PrZy.js";import"./normalizeUtilsCommon-BU8xfl77.js";import"./pbfQueryUtils-DUjEbwA9.js";import"./pbf-B53Txr8m.js";import"./executeQueryJSON-DDi8KdIf.js";import"./executeQueryPBF-71YCUWAF.js";import"./floorFilterUtils-2NbRkqHK.js";let J=class extends(e(t(r(M(U(s(i(a(o(l(n(p(E))))))))))))){constructor(...e){super(...e),this._exportImageParameters=new N({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(m).then((()=>this._fetchService(t)))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,r,s){var i,a,o;if(!this.loaded||!e)return;const l=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let n=!1;const p=u(s.origin);if((null==(i=this.capabilities)?void 0:i.operations.supportsExportMap)&&(null==(o=null==(a=this.capabilities)?void 0:a.exportMap)?void 0:o.supportsDynamicLayers))if(p===d.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;n=q(l,e,d.SERVICE)}else if(p>d.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");n=q(l,e.sublayers,u(e.origin))}const m=[],y={writeSublayerStructure:n,...s};let h=n||this.hasVisibleLayersForOrigin(p);l.forEach((e=>{const t=e.write({},y);m.push(t),h=h||"user"===e.originOf("visible")})),m.some((e=>Object.keys(e).length>1))&&(t.layers=m),h&&(t.visibleLayers=l.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,s){const i=(null==s?void 0:s.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(null==s?void 0:s.floors)??null,this._exportImageParameters.scale=y({extent:e,width:t})*i;const a=this._exportImageParameters.toJSON(),o=!(null==s?void 0:s.rotation)||this.version<10.3?{}:{rotation:-s.rotation},l=null==e?void 0:e.spatialReference,n=h(l);a.dpi*=i;const p={};if(null==s?void 0:s.timeExtent){const{start:e,end:t}=s.timeExtent.toJSON();p.time=e&&t&&e===t?""+e:`${e??"null"},${t??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(p.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:t+","+r,...a,...o,...p}}async fetchImage(e,t,r,s){const{data:i}=await this._fetchImage("image",e,t,r,s);return i}async fetchImageBitmap(e,t,r,s){const{data:i,url:a}=await this._fetchImage("blob",e,t,r,s);return _(i,a,null==s?void 0:s.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:r}=await c(this.url,t),{extent:s,fullExtent:i,timeExtent:a}=r,o=s||i;return{fullExtent:o&&g.fromJSON(o),timeExtent:a&&v.fromJSON({start:a[0],end:a[1]})}}loadAll(){return b(this,(e=>{e(this.allSublayers),e(this.subtables)}))}serviceSupportsSpatialReference(e){return f(this,e)}async _fetchImage(e,t,r,s,i){var a,o,l;const n={responseType:e,signal:(null==i?void 0:i.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,r,s,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},p=this.parsedUrl.path+"/export";if(null!=(null==(a=n.query)?void 0:a.dynamicLayers)&&!(null==(l=null==(o=this.capabilities)?void 0:o.exportMap)?void 0:l.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:e}=await c(p,n);return{data:e,url:p}}catch(m){if(S(m))throw m;throw new x("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var t;return!(null==e||!(null==(t=this.sublayersSourceJSON[e])?void 0:t.visibleLayers))}};I([j(w("dateFieldsTimeReference"))],J.prototype,"dateFieldsTimeZone",void 0),I([j({type:Boolean})],J.prototype,"datesInUnknownTimezone",void 0),I([j()],J.prototype,"dpi",void 0),I([j()],J.prototype,"gdbVersion",void 0),I([j()],J.prototype,"imageFormat",void 0),I([O("imageFormat",["supportedImageFormatTypes"])],J.prototype,"readImageFormat",null),I([j({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],J.prototype,"imageMaxHeight",void 0),I([j({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],J.prototype,"imageMaxWidth",void 0),I([j()],J.prototype,"imageTransparency",void 0),I([j({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],J.prototype,"isReference",void 0),I([j({json:{read:!1,write:!1}})],J.prototype,"labelsVisible",void 0),I([j({type:["ArcGISMapServiceLayer"]})],J.prototype,"operationalLayerType",void 0),I([j({json:{read:!1,write:!1}})],J.prototype,"popupEnabled",void 0),I([j(w("preferredTimeReference"))],J.prototype,"preferredTimeZone",void 0),I([j()],J.prototype,"sourceJSON",void 0),I([j({json:{write:{ignoreOrigin:!0}}})],J.prototype,"sublayers",void 0),I([T("sublayers",{layers:{type:[R]},visibleLayers:{type:[L]}})],J.prototype,"writeSublayers",null),I([j({type:["show","hide","hide-children"]})],J.prototype,"listMode",void 0),I([j({json:{read:!1},readOnly:!0,value:"map-image"})],J.prototype,"type",void 0),I([j(P)],J.prototype,"url",void 0),J=I([F("esri.layers.MapImageLayer")],J);const k=J;export{k as default};
