import{S as e,h as t,P as i,gP as s,g as n,bd as o,gR as r,b3 as a,x as l,fO as p,j as d,gS as u,J as c,d8 as h,fi as y,fq as g,fQ as m,fe as _,a8 as f,e as S,y as v,a as w,gQ as j,gT as k}from"./index-DSIPxOWi.js";import{t as E}from"./memoize-Dzy0sPL8.js";import{a as b}from"./normalizeUtilsSync-B5F66Zka.js";import{m as C}from"./FeatureStore-Dpo5Syxq.js";import{$ as F}from"./QueryEngine-DAD9skS_.js";import{f as P,y as A}from"./SnappingManagerPool-BslN_FM5.js";import{o as G,i as H}from"./queryEngineUtils-Dj40YZwO.js";import{i as I,r as R,n as x}from"./symbologySnappingCandidates-Cl8kN1ha.js";import"./normalizeUtilsCommon-BU8xfl77.js";import"./BoundsStore-BQ0MOdb7.js";import"./PooledRBush-DOZnXWx2.js";import"./quickselect-D9ta8ndX.js";import"./optimizedFeatureQueryEngineAdapter--U1rvwBV.js";import"./normalizeUtils-BrH-PrZy.js";import"./WhereClause-DYd7Xwn9.js";import"./TimeOnly-C5lZbbIX.js";import"./json-omtrO2vq.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-B-uQJqPz.js";import"./utils-DEUXBrCj.js";import"./utils-1_4Re7um.js";import"./ClassBreaksDefinition-Dt1HCCB7.js";import"./geodesicLengthMeasurementUtils-Pq-FipkN.js";import"./geometryEngine-Bp1TD6MM.js";import"./geometryEngineBase-9EI9fooq.js";import"./hydrated-DE1HcVsK.js";import"./geometry2dUtils-4c9qUvJ6.js";import"./floorFilterUtils-2NbRkqHK.js";import"./keybindings-DkkJsHdp.js";import"./VertexSnappingCandidate-D8VJ-XhT.js";import"./PointSnappingHint-Ct-FTQTL.js";const z="graphics-collections";let O=class extends e{get updating(){return this._updatingHandles.updating}get _hasZ(){const e=this.view;return null!=e&&"3d"===e.type&&"map-notes"!==this.layerSource.layer.type}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=null!=e&&"3d"===e.type;if(!i||"map-notes"===t.type)return I();return I(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:async(i,s)=>(await j(e.whenLayerView(t),s)).elevationAlignPointsInFeatures(i,s)})}get _snappingElevationFilter(){const{view:e}=this,t=null!=e&&"3d"===e.type&&"map-notes"!==this.layerSource.layer.type;return R(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=null!=e&&"3d"===e.type,s=this._extrudedPolygonSymbolsCount>0;return i&&"map-notes"!==t.type&&s?x(s,(async(i,s)=>{const n=await e.whenLayerView(t);return a(s),n.queryForSymbologySnapping({candidates:i,spatialReference:e.spatialReference},s)})):x()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new t,this._memoizedMakeGetGroundElevation=E(H)}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources((e=>this._destroySource(e))),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add((()=>this.getGraphicsLayers()),(e=>{this._updatingHandles.removeHandles(z);for(const t of e)this._addMany(t.graphics.toArray()),this.addHandles([t.on("graphic-update",(e=>this._onGraphicUpdate(e))),this._updatingHandles.addOnCollectionChange((()=>t.graphics),(e=>this._onGraphicsChanged(e)))],z)}),i);const{view:e}=this,{layer:t}=this.layerSource;null!=e&&"3d"===e.type&&"map-notes"!==t.type&&e.elevationProvider&&this.addHandles([e.elevationProvider.on("elevation-change",(({context:e})=>{s(e,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()})),n((()=>t.elevationInfo),(()=>this._snappingElevationAligner.notifyElevationSourceChange()),i),o((()=>t),["edits","apply-edits","graphic-update"],(()=>this._symbologySnappingFetcher.notifySymbologyChange()))])}async fetchCandidates(e,t){const{point:i,coordinateHelper:{spatialReference:s}}=e,n=await r(this._mapSources((i=>this._fetchCandidatesForSource(i,e,t))));a(t);const o=this._memoizedMakeGetGroundElevation(this.view,s),l=n.flat().map((e=>G(e,o)));return P(i,l),l}async _fetchCandidatesForSource(e,t,i){var s;const n=A(t,(null==(s=this.view)?void 0:s.type)??"2d"),o=await e.queryEngine.executeQueryForSnapping(n,i);a(i);const r=await this._snappingElevationAligner.alignCandidates(o.candidates,t.coordinateHelper.spatialReference,i);a(i);const l=await this._symbologySnappingFetcher.fetch(r,i);a(i);const p=0===l.length?r:[...r,...l];return this._snappingElevationFilter.filter(n,p)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some((t=>t.graphics.includes(e.graphic))))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)null!=s.geometry&&(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=l((async i=>{await p(e.map((e=>({source:e,dest:this.spatialReference}))),{signal:i}),this._markLoadedSpatialReferences(e);for(const[,e]of t)this._add(e)}));this._updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},n2=()=>k(this._pendingAdds,s);i.promise.then(n2,n2),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e){null!=t.wkid&&this._loadedWkids.add(t.wkid);const e=t.wkt2||t.wkt;e&&this._loadedWkts.add(e)}}_add(e){if(null==e.geometry||!e.visible)return;let t=e.geometry;if("mesh"===t.type)return;"extent"===t.type&&(t=d.fromExtent(t));const i=this._ensureSource(t.type);if(null==i)return;const s=this._createOptimizedFeature(e.uid,t);null!=s&&(i.featureStore.add(s),u(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){if(null!=e.wkid&&this._loadedWkids.has(e.wkid))return!1;const t=e.wkt2||e.wkt;return!(t&&this._loadedWkts.has(t)||c(e,this.spatialReference))}_createOptimizedFeature(e,t){const i=h(b(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),n=y(s,this._hasZ,!1);return new g(n,{[M]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t2=e=>{for(;e.length<3;)e.push(0)},t=e.clone();switch(t.hasZ=!0,t.type){case"point":t.z=t.z??0;break;case"multipoint":t.points.forEach(t2);break;case"polyline":t.paths.forEach((e=>e.forEach(t2)));break;case"polygon":t.rings.forEach((e=>e.forEach(t2)))}return t}_ensureSource(e){const t=this._sources[e];if(null!=t)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=m.toJSON(e),i=this._hasZ,s=new C({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new F({featureStore:s,fieldsIndex:_.fromLayerJSON({fields:[{name:M,type:"esriFieldTypeOID",alias:M}]}),geometryType:t,hasM:!1,hasZ:i,objectIdField:M,spatialReference:this.spatialReference,priority:f.SNAPPING,scheduler:null!=this.view&&"3d"===this.view.type?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources((t=>this._removeFromSource(t,e)));for(const t of this._pendingAdds)t.graphics.delete(e.uid),0===t.graphics.size&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),u(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:n}=this._sources,o=[];return null!=t&&o.push(e(t)),null!=i&&o.push(e(i)),null!=s&&o.push(e(s)),null!=n&&o.push(e(n)),o}};S([v()],O.prototype,"getGraphicsLayers",void 0),S([v({constructOnly:!0})],O.prototype,"layerSource",void 0),S([v({constructOnly:!0})],O.prototype,"spatialReference",void 0),S([v({constructOnly:!0})],O.prototype,"view",void 0),S([v({readOnly:!0})],O.prototype,"updating",null),S([v({readOnly:!0})],O.prototype,"availability",void 0),S([v()],O.prototype,"_hasZ",null),S([v()],O.prototype,"_snappingElevationAligner",null),S([v()],O.prototype,"_snappingElevationFilter",null),S([v()],O.prototype,"_symbologySnappingFetcher",null),S([v()],O.prototype,"_extrudedPolygonSymbolsCount",void 0),O=S([w("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],O);const M="OBJECTID";export{O as GraphicsSnappingSource};
