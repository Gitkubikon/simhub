import{bf as e,n as t,a0 as s,bg as i,b3 as r}from"./index-DSIPxOWi.js";let n=class h{constructor(s,i,r,n,a={}){this._mainMethod=i,this._transferLists=r,this._listeners=[],this._promise=e(s,{...a,schedule:n}).then((e=>{if(void 0===this._thread){this._thread=e,this._promise=null,a.hasInitialize&&this.broadcast({},"initialize");for(const e of this._listeners)this._connectListener(e)}else e.close()})),this._promise.catch((e=>t.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${s} worker: ${e}`)))}on(e,t){const r={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(r),this._connectListener(r),s((()=>{r.removed=!0,i(this._listeners,r),this._thread&&null!=r.threadHandle&&r.threadHandle.remove()}))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null,this._listeners.length=0,this._transferLists={}}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,s){if(this._thread){const i=this._transferLists[e],r=i?i(t):[];return this._thread.invoke(e,t,{transferList:r,signal:s})}return this._promise?this._promise.then((()=>(r(s),this.invokeMethod(e,t,s)))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then((t=>{e.removed||(e.threadHandle=t)}))}};export{n as h};
