import{e,c8 as r,a as t,az as s,aw as o,kx as n}from"./index-DSIPxOWi.js";import{g as l,f as a,m as c,j as m,L as f,h as u,W as p,E as d,U as S,D as y,R as x,u as O,s as h}from"./dataUtils-DNEwlV4z.js";import{a as N,c as v,y as P,S as B}from"./PolynomialTransform-8quIBSKZ.js";import{M as k,T as w,e as g}from"./rasterProjectionHelper-WTn80RSY.js";var b;let z=b=class extends N{constructor(){super(...arguments),this.type="identity"}clone(){return new b}};e([r({IdentityXform:"identity"})],z.prototype,"type",void 0),z=b=e([t("esri.layers.support.rasterTransforms.IdentityTransform")],z);const T={GCSShiftXform:v,IdentityXform:z,PolynomialXform:P};class J{convertVectorFieldData(e){const r=l.fromJSON(e.pixelBlock),t=a(r,e.type);return Promise.resolve(null!=t?t.toJSON():null)}computeStatisticsHistograms(e){const r=l.fromJSON(e.pixelBlock),t=c(r);return Promise.resolve(t)}async decode(e){const r=await m(e.data,e.options);return r&&r.toJSON()}symbolize(e){e.pixelBlock=l.fromJSON(e.pixelBlock),e.extent=e.extent?s.fromJSON(e.extent):null;const r=this.symbolizer.symbolize(e);return Promise.resolve(null!=r?r.toJSON():null)}async updateSymbolizer(e){var r;this.symbolizer=f.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=B(e.rasterFunctionJSON)}async process(e){var r;const t=this.rasterFunction.process({extent:s.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>null!=e?l.fromJSON(e):null)),primaryPixelSizes:null==(r=e.primaryPixelSizes)?void 0:r.map((e=>null!=e?o.fromJSON(e):null)),primaryRasterIds:e.primaryRasterIds});return null!=t?t.toJSON():null}stretch(e){const r=this.symbolizer.simpleStretch(l.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(null==r?void 0:r.toJSON())}estimateStatisticsHistograms(e){const r=u(l.fromJSON(e.srcPixelBlock));return Promise.resolve(r)}split(e){const r=p(l.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel??0,!1===e.useBilinear);return r&&r.forEach(((e,t)=>{r.set(t,null==e?void 0:e.toJSON())})),Promise.resolve(r)}clipTile(e){const r=l.fromJSON(e.pixelBlock),t=d({...e,pixelBlock:r});return Promise.resolve(null==t?void 0:t.toJSON())}async mosaicAndTransform(e){const r=e.srcPixelBlocks.map((e=>e?new l(e):null)),t=S(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let s,o=t;return e.coefs&&(o=y(t,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(s=x(e.destDimension,e.gcsGrid),o=O(o,e.isUV?"vector-uv":"vector-magdir",s)),{pixelBlock:null==o?void 0:o.toJSON(),localNorthDirections:s}}async createFlowMesh(e,r){const t={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await h(e.meshType,e.simulationSettings,t,r.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const r=s.fromJSON(e.projectedExtent),t=s.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new n({steps:e.datumTransformationSteps})),(e.includeGCSGrid||k(r.spatialReference,t.spatialReference,o))&&await w();const l=e.rasterTransform?function i(e){if(!(null==e?void 0:e.type))return null;const r=T[null==e?void 0:e.type];if(r){const t=new r;return t.read(e),t}return null}(e.rasterTransform):null;return g({...e,projectedExtent:r,srcBufferExtent:t,datumTransformation:o,rasterTransform:l})}}export{J as default};
