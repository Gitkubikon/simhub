import{e,y as t,a as r,S as i,bp as s,Q as n,h as o,hS as a,z as d,lc as c,c as l,b3 as p,cD as u}from"./index-DSIPxOWi.js";import{a as y}from"./EdgeWorkerHandle-BFdu_J0U.js";import{h as g}from"./WorkerHandle-Bq2affGI.js";import{p as w,a as _,b as S}from"./SnappingManagerPool-BslN_FM5.js";import{r as v}from"./VertexSnappingCandidate-D8VJ-XhT.js";import"./workerHelper-CgQLvwGd.js";import"./geodesicLengthMeasurementUtils-Pq-FipkN.js";import"./geometryEngine-Bp1TD6MM.js";import"./geometryEngineBase-9EI9fooq.js";import"./hydrated-DE1HcVsK.js";import"./geometry2dUtils-4c9qUvJ6.js";import"./floorFilterUtils-2NbRkqHK.js";import"./keybindings-DkkJsHdp.js";import"./PointSnappingHint-Ct-FTQTL.js";let m=class extends i{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new f(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:i}=e,n=k;this.renderCoordsHelper.toRenderCoords(i,r.spatialReference,n);const o=e.distance,a="number"==typeof o?o:o.distance,d=await this._workerHandle.invoke({bounds:s(n[0],n[1],n[2],a),returnEdge:e.returnEdge,returnVertex:"none"!==e.vertexMode},t);return d.candidates.sort(((e,t)=>e.distance-t.distance)),d.candidates.map((e=>this._convertCandidate(r,e)))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new _({objectId:t.objectId,targetPoint:w(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new v({objectId:t.objectId,targetPoint:w(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=n();return this.renderCoordsHelper.fromRenderCoords(t,r,e),S(r)}async _fetchAllEdgeLocations(e,t){const r=[],i=[];for(const{id:s,uid:n}of e.components)this._ids.has(s)&&r.push((async()=>{const e=await this.fetchEdgeLocations(s,t.signal),r=e.locations.buffer;return i.push(r),{id:s,uid:n,objectIds:e.objectIds,locations:r,origin:e.origin,type:e.type}})());return{result:{components:(await Promise.all(r)).filter((({id:e})=>this._ids.has(e)))},transferList:i}}};e([t({constructOnly:!0})],m.prototype,"renderCoordsHelper",void 0),e([t({constructOnly:!0})],m.prototype,"fetchEdgeLocations",void 0),e([t({constructOnly:!0})],m.prototype,"schedule",void 0),e([t({readOnly:!0})],m.prototype,"availability",void 0),m=e([r("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],m);let f=class h extends g{constructor(e,t){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:t})}};const k=n();let H=class extends i{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new o,this._abortController=new AbortController}destroy(){this._tracker=a(this._tracker),this._abortController=d(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new y(h2(t)),this._workerHandle=new m({renderCoordsHelper:this.view.renderCoordsHelper,schedule:h2(t),fetchEdgeLocations:async(e,t)=>{if(null==this._tracker)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(e,this._edgeWorker,t)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([c(this._workerHandle),c(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var e;if(this.destroyed)return;const t=null==(e=this._abortController)?void 0:e.signal,r=await this.getLayerView();null==r||l(t)||(this._tracker=r.trackSnappingSources({add:(e,r)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:e,bounds:r},t))},remove:e=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:e},t))}}))}};function h2(e){return t=>e.immediate.schedule(t)}e([t({constructOnly:!0})],H.prototype,"getLayerView",void 0),e([t({constructOnly:!0})],H.prototype,"view",void 0),e([t({readOnly:!0})],H.prototype,"updating",null),e([t({readOnly:!0})],H.prototype,"availability",void 0),H=e([r("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],H);let b=class extends i{get updating(){return this._i3sSources.some((e=>e.updating))}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach((e=>e.destroy())),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources="building-scene"===t.type?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map((r=>r.fetchCandidates(e,t))));return p(t),r.flat()}refresh(){this._i3sSources.forEach((e=>e.refresh()))}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map((r=>"building-component"===r.type?new H({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null)).filter(u)}_getSceneLayerI3SSource(e,t){return new H({getLayerView:async()=>{const r=await e.whenLayerView(t);return"scene-layer-graphics-3d"===r.type?void 0:r},view:e})}};e([t({constructOnly:!0})],b.prototype,"layerSource",void 0),e([t({constructOnly:!0})],b.prototype,"view",void 0),e([t({readOnly:!0})],b.prototype,"updating",null),e([t({readOnly:!0})],b.prototype,"availability",void 0),b=e([r("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],b);export{b as SceneLayerSnappingSource};
