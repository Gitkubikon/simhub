import{e,y as r,a as o,bk as n,aw as i,ax as a,S as l}from"./index-DSIPxOWi.js";let u=class t extends n{constructor(e){super(e),this.properties=null}};e([r({json:{write:!0}})],u.prototype,"properties",void 0),u=e([o("esri.rest.knowledgeGraph.GraphObject")],u);const d=u;let y=class s extends d{constructor(e){super(e),this.typeName=null,this.id=null}};e([r({type:String,json:{write:!0}})],y.prototype,"typeName",void 0),e([r({type:String,json:{write:!0}})],y.prototype,"id",void 0),y=e([o("esri.rest.knowledgeGraph.GraphNamedObject")],y);const c=y;let h=class p extends c{constructor(e){super(e),this.layoutGeometry=null}};e([r({type:i,json:{write:!0}})],h.prototype,"layoutGeometry",void 0),h=e([o("esri.rest.knowledgeGraph.Entity")],h);const m=h;let v=class extends c{constructor(e){super(e),this.originId=null,this.destinationId=null,this.layoutGeometry=null}};e([r({type:String,json:{write:!0}})],v.prototype,"originId",void 0),e([r({type:String,json:{write:!0}})],v.prototype,"destinationId",void 0),e([r({type:a,json:{write:!0}})],v.prototype,"layoutGeometry",void 0),v=e([o("esri.rest.knowledgeGraph.Relationship")],v);const G=v;let w=class extends d{constructor(e){super(e)}};w=e([o("esri.rest.knowledgeGraph.ObjectValue")],w);const g=w;let j=class p2 extends n{constructor(e){super(e),this.path=null}};e([r({type:[d],json:{write:!0}})],j.prototype,"path",void 0),j=e([o("esri.rest.knowledgeGraph.Path")],j);const x=j;let k=class extends l{constructor(e){super(e),this.openCypherQuery=""}};e([r()],k.prototype,"openCypherQuery",void 0),k=e([o("esri.rest.knowledgeGraph.GraphQuery")],k);const b=k;let Q=class extends b{constructor(e){super(e),this.bindParameters=null,this.bindGeometryQuantizationParameters=null,this.outputQuantizationParameters=null,this.outputSpatialReference=null,this.provenanceBehavior=null}};e([r()],Q.prototype,"bindParameters",void 0),e([r()],Q.prototype,"bindGeometryQuantizationParameters",void 0),e([r()],Q.prototype,"outputQuantizationParameters",void 0),e([r()],Q.prototype,"outputSpatialReference",void 0),e([r()],Q.prototype,"provenanceBehavior",void 0),Q=e([o("esri.rest.knowledgeGraph.GraphQueryStreaming")],Q);const S=Q;export{x as c,m,G as p,S as s,g as t};
