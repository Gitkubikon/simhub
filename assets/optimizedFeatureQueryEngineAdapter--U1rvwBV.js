import{fq as o,fr as l}from"./index-DSIPxOWi.js";function t(o,l){return o?l?4:3:l?3:2}function n(o,l,s,c){if(!(null==l?void 0:l.lengths.length))return null;o.lengths.length&&(o.lengths.length=0),o.coords.length&&(o.coords.length=0);const i=o.coords,f=[],g=s?[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY]:[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],{lengths:h,coords:T}=l,b=t(s,c);let m=0;for(const E of h){const o=e(g,T,m,E,s,c);o&&f.push(o),m+=E*b}if(f.sort(((o,l)=>{let c=o[2]-l[2];return 0===c&&s&&(c=o[4]-l[4]),c})),f.length){let o=6*f[0][2];i[0]=f[0][0]/o,i[1]=f[0][1]/o,s&&(o=6*f[0][4],i[2]=0!==o?f[0][3]/o:0),(i[0]<g[0]||i[0]>g[1]||i[1]<g[2]||i[1]>g[3]||s&&(i[2]<g[4]||i[2]>g[5]))&&(i.length=0)}if(!i.length){const o=l.lengths[0]?function r(o,l,s,c,i){const f=t(c,i);let g=l,h=l+f,T=0,b=0,m=0,E=0;for(let d=0,F=s-1;d<F;d++,g+=f,h+=f){const l=o[g],s=o[g+1],i=o[g+2],f=o[h],d=o[h+1],F=o[h+2],V=c?u(l,s,i,f,d,F):I(l,s,f,d);if(V)if(T+=V,c){const o=N(l,s,i,f,d,F);b+=V*o[0],m+=V*o[1],E+=V*o[2]}else{const o=o$1(l,s,f,d);b+=V*o[0],m+=V*o[1]}}return T>0?c?[b/T,m/T,E/T]:[b/T,m/T]:s>0?c?[o[l],o[l+1],o[l+2]]:[o[l],o[l+1]]:null}(T,0,h[0],s,c):null;if(!o)return null;i[0]=o[0],i[1]=o[1],s&&o.length>2&&(i[2]=o[2])}return o}function e(o,l,s,c,i,f){const g=t(i,f);let h=s,T=s+g,b=0,m=0,E=0,d=0,F=0;for(let Y=0,_=c-1;Y<_;Y++,h+=g,T+=g){const s=l[h],c=l[h+1],f=l[h+2],g=l[T],V=l[T+1],Y=l[T+2];let _=s*V-g*c;d+=_,b+=(s+g)*_,m+=(c+V)*_,i&&(_=s*Y-g*f,E+=(f+Y)*_,F+=_),s<o[0]&&(o[0]=s),s>o[1]&&(o[1]=s),c<o[2]&&(o[2]=c),c>o[3]&&(o[3]=c),i&&(f<o[4]&&(o[4]=f),f>o[5]&&(o[5]=f))}if(d>0&&(d*=-1),F>0&&(F*=-1),!d)return null;const V=[b,m,.5*d];return i&&(V[3]=E,V[4]=.5*F),V}function I(o,l,s,c){const i=s-o,f=c-l;return Math.sqrt(i*i+f*f)}function u(o,l,s,c,i,f){const g=c-o,h=i-l,T=f-s;return Math.sqrt(g*g+h*h+T*T)}function o$1(o,l,s,c){return[o+.5*(s-o),l+.5*(c-l)]}function N(o,l,s,c,i,f){return[o+.5*(c-o),l+.5*(i-l),s+.5*(f-s)]}const s={getObjectId:o=>o.objectId,getAttributes:o=>o.attributes,getAttribute:(o,l)=>o.attributes[l],cloneWithGeometry:(l,s)=>new o(s,l.attributes,null,l.objectId),getGeometry:o=>o.geometry,getCentroid:(o,s)=>(null==o.centroid&&(o.centroid=n(new l,o.geometry,s.hasZ,s.hasM)),o.centroid)};export{n,s as o};
