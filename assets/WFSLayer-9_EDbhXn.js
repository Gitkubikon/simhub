import{e,y as t,a as i,i1 as r,h5 as s,a_ as o,az as a,b as n,fQ as l,jM as p,bf as d,m as u,n as y,aY as c,iE as m,gc as h,iF as f,iG as g,g2 as w,gp as v,g3 as F,g4 as x,eo as b,ep as O,eq as S,I,iH as R,iI as j,fP as C,gC as T,ej as P,iJ as q,a2 as E,gv as U,gm as _,bj as N,iK as J,iL as k,iM as W,g7 as Y,gw as D,jN as X,iO as H,iP as Q,iQ as L,iR as G,iS as V,ev as z,iU as Z,Z as A}from"./index-DSIPxOWi.js";import{l as M,o as $}from"./clientSideDefaults-Cn_svm8L.js";import{v as B,W as K,z as ee,Y as te,S as ie}from"./wfsUtils-fdslda3j.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./geojson-CFL0cZN1.js";import"./date-Do_V47iR.js";import"./xmlUtils-DL7icO0w.js";let re=class extends r{constructor(){super(...arguments),this._connection=null,this._workerHandler=null,this.capabilities=M(!1,!1),this.type="wfs",this.refresh=s((async()=>{await this.load();const e={customParameters:this.layer.customParameters,maxRecordCount:this.layer.maxRecordCount,maxTotalRecordCount:this.layer.maxTotalRecordCount,maxPageCount:this.layer.maxPageCount},{extent:t}=await this._workerHandler.refresh(e);return t&&(this.sourceJSON.extent=t),{dataChanged:!0,updates:{extent:this.sourceJSON.extent}}}))}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this._startWorker({signal:t})),Promise.resolve(this)}destroy(){var e;null==(e=this._connection)||e.close(),this._connection=null,this._workerHandler=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){const i=await this.queryFeaturesJSON(e,t);return o.fromJSON(i)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._workerHandler.queryFeatures(e?e.toJSON():void 0,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._workerHandler.queryFeatureCount(e?e.toJSON():void 0,t)}async queryObjectIds(e,t={}){return await this.load(t),this._workerHandler.queryObjectIds(e?e.toJSON():void 0,t)}async queryExtent(e,t={}){await this.load(t);const i=await this._workerHandler.queryExtent(e?e.toJSON():void 0,t);return{count:i.count,extent:a.fromJSON(i.extent)}}async querySnapping(e,t={}){return await this.load(t),this._workerHandler.querySnapping(e,t)}async _createLoadOptions(e){var t,i;const{url:r,customParameters:s,name:o,namespaceUri:a,fields:p,geometryType:d,maxRecordCount:u,maxPageCount:y,maxTotalRecordCount:c,swapXY:m}=this.layer,h="defaults"===this.layer.originOf("spatialReference")?void 0:this.layer.spatialReference;if(!r)throw new n("wfs-layer:missing-url","WFSLayer must be created with a url");this.wfsCapabilities||(this.wfsCapabilities=await B(r,{customParameters:s,...e}));const f=["fields","geometryType","name","namespaceUri","swapXY"].some((e=>null==this.layer[e]))?await K(this.wfsCapabilities,o,a,{spatialReference:h,customParameters:s,signal:null==e?void 0:e.signal}):{...ee(p??[]),geometryType:d,name:o,namespaceUri:a,spatialReference:h,swapXY:m},g=te(this.wfsCapabilities.readFeatureTypes(),f.name,f.namespaceUri),w=l.toJSON(f.geometryType),{operations:v}=this.wfsCapabilities,F=v.GetFeature.url,x=v.GetFeature.outputFormat;return{customParameters:s,featureType:g,fields:(null==(t=f.fields)?void 0:t.map((e=>e.toJSON())))??[],geometryField:f.geometryField,geometryType:w,getFeatureUrl:F,getFeatureOutputFormat:x,maxRecordCount:u,maxPageCount:y,maxTotalRecordCount:c,objectIdField:f.objectIdField,spatialReference:null==(i=f.spatialReference)?void 0:i.toJSON(),swapXY:!!f.swapXY}}async _startWorker(e){const[t,i]=await p([this._createLoadOptions(e),d("WFSSourceWorker",{...e,strategy:u("feature-layers-workers")?"dedicated":"local",registryTarget:this})]),r=t.error||i.error||null,s=i.value||null;if(r)throw s&&s.close(),r;const o=t.value;this._connection=i.value,this._workerHandler=this._connection.createInvokeProxy();const a=await this._workerHandler.load(o,e);for(const n of a.warnings)y.getLogger(this.layer).warn("#load()",`${n.message} (title: '${this.layer.title||"no title"}', id: '${this.layer.id??"no id"}')`,{warning:n});this.sourceJSON={dateFieldsTimeReference:{timeZoneIANA:c},extent:a.extent,fields:o.fields,geometryType:o.geometryType,objectIdField:o.objectIdField,geometryField:o.geometryField,drawingInfo:$(o.geometryType),name:o.featureType.title,wfsInfo:{name:o.featureType.name,featureUrl:o.getFeatureUrl,maxFeatures:o.maxRecordCount,swapXY:o.swapXY,supportedSpatialReferences:o.featureType.supportedSpatialReferences,version:"2.0.0",wfsNamespace:o.featureType.namespaceUri}}}};var se;e([t()],re.prototype,"capabilities",void 0),e([t({constructOnly:!0})],re.prototype,"layer",void 0),e([t()],re.prototype,"sourceJSON",void 0),e([t()],re.prototype,"type",void 0),e([t()],re.prototype,"wfsCapabilities",void 0),re=e([i("esri.layers.graphics.sources.WFSSource")],re);const oe=Z();let ae=se=class extends(m(h(f(g(w(v(F(x(b(O(S(A)))))))))))){static fromWFSLayerInfo(e){const{customParameters:t,fields:i,geometryField:r,geometryType:s,name:o,namespaceUri:a,objectIdField:n,spatialReference:l,swapXY:p,url:d,wfsCapabilities:u}=e;return new se({customParameters:t,fields:i,geometryField:r,geometryType:s,name:o,namespaceUri:a,objectIdField:n,spatialReference:l,swapXY:p,url:d,wfsCapabilities:u})}constructor(e){super(e),this.copyright=null,this.customParameters=null,this.dateFieldsTimeZone=null,this.definitionExpression=null,this.displayField=null,this.elevationInfo=null,this.featureUrl=void 0,this.fields=null,this.fieldsIndex=null,this.fullExtent=null,this.geometryType=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.objectIdField=null,this.operationalLayerType="WFS",this.maxRecordCount=3e3,this.maxPageCount=10,this.maxTotalRecordCount=2e5,this.mode=0,this.name=null,this.namespaceUri=null,this.outFields=null,this.popupEnabled=!0,this.popupTemplate=null,this.screenSizePerspectiveEnabled=!0,this.source=new re({layer:this}),this.spatialReference=I.WGS84,this.spatialReferences=[4326],this.swapXY=void 0,this.title="WFS",this.type="wfs",this.url=null,this.version=void 0}destroy(){var e;null==(e=this.source)||e.destroy()}load(e){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WFS"]},e).then((()=>this.source.load(e))).then((()=>{this.read(this.source.sourceJSON,{origin:"service",url:this.parsedUrl}),this.revert(["objectIdField","fields","timeInfo","spatialReference","name","namespaceUri"],"service"),R(this.renderer,this.fieldsIndex),j(this.timeInfo,this.fieldsIndex)}))),Promise.resolve(this)}get capabilities(){var e;return null==(e=this.source)?void 0:e.capabilities}get createQueryVersion(){return this.commitProperty("definitionExpression"),this.commitProperty("timeExtent"),this.commitProperty("timeOffset"),this.commitProperty("geometryType"),this.commitProperty("capabilities"),(this._get("createQueryVersion")||0)+1}get defaultPopupTemplate(){return this.createPopupTemplate()}writeFields(e,t,i){const r=e.filter((e=>e.name!==ie));this.geometryField&&r.unshift(new C({name:this.geometryField,alias:this.geometryField,type:"geometry"})),T(i,r.map((e=>e.toJSON())),t)}get parsedUrl(){return P(this.url)}set renderer(e){R(e,this.fieldsIndex),this._set("renderer",e)}get wfsCapabilities(){var e;return null==(e=this.source)?void 0:e.wfsCapabilities}set wfsCapabilities(e){this.source&&(this.source.wfsCapabilities=e)}createPopupTemplate(e){return q(this,e)}createQuery(){const e=new E({returnGeometry:!0,outFields:["*"],where:this.definitionExpression||"1=1"}),{timeOffset:t,timeExtent:i}=this;return e.timeExtent=null!=t&&null!=i?i.offset(-t.value,t.unit):i||null,e}getFieldDomain(e,t){var i;return null==(i=this.getField(e))?void 0:i.domain}getField(e){var t;return null==(t=this.fieldsIndex)?void 0:t.get(e)}queryFeatures(e,t){return this.load().then((()=>this.source.queryFeatures(E.from(e)||this.createQuery(),t))).then((e=>{if(null==e?void 0:e.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryObjectIds(e,t){return this.load().then((()=>this.source.queryObjectIds(E.from(e)||this.createQuery(),t)))}queryFeatureCount(e,t){return this.load().then((()=>this.source.queryFeatureCount(E.from(e)||this.createQuery(),t)))}queryExtent(e,t){return this.load().then((()=>this.source.queryExtent(E.from(e)||this.createQuery(),t)))}async hasDataChanged(){try{const{dataChanged:e,updates:t}=await this.source.refresh();return null!=t&&this.read(t,{origin:"service",url:this.parsedUrl,ignoreDefaults:!0}),e}catch{}return!1}};e([t({readOnly:!0})],ae.prototype,"capabilities",null),e([t({type:String})],ae.prototype,"copyright",void 0),e([t({readOnly:!0})],ae.prototype,"createQueryVersion",null),e([t({json:{name:"wfsInfo.customParameters",write:{overridePolicy:e=>({enabled:!!(e&&Object.keys(e).length>0),ignoreOrigin:!0})}}})],ae.prototype,"customParameters",void 0),e([t(U("dateFieldsTimeReference"))],ae.prototype,"dateFieldsTimeZone",void 0),e([t({readOnly:!0})],ae.prototype,"defaultPopupTemplate",null),e([t({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],ae.prototype,"definitionExpression",void 0),e([t({type:String})],ae.prototype,"displayField",void 0),e([t(_)],ae.prototype,"elevationInfo",void 0),e([t({type:String,readOnly:!0,json:{name:"wfsInfo.featureUrl",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"featureUrl",void 0),e([t({type:[C],json:{name:"layerDefinition.fields",write:{ignoreOrigin:!0,isRequired:!0},origins:{service:{name:"fields"}}}})],ae.prototype,"fields",void 0),e([N("fields")],ae.prototype,"writeFields",null),e([t(oe.fieldsIndex)],ae.prototype,"fieldsIndex",void 0),e([t({type:a,json:{name:"extent"}})],ae.prototype,"fullExtent",void 0),e([t()],ae.prototype,"geometryField",void 0),e([t({type:String,json:{read:{source:"layerDefinition.geometryType",reader:l.read},write:{target:"layerDefinition.geometryType",writer:l.write,ignoreOrigin:!0},origins:{service:{read:l.read}}}})],ae.prototype,"geometryType",void 0),e([t({type:String})],ae.prototype,"id",void 0),e([t(J)],ae.prototype,"labelsVisible",void 0),e([t({type:[k],json:{name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:W},write:!0}})],ae.prototype,"labelingInfo",void 0),e([t(Y)],ae.prototype,"legendEnabled",void 0),e([t({type:["show","hide"]})],ae.prototype,"listMode",void 0),e([t({type:String})],ae.prototype,"objectIdField",void 0),e([t({type:["WFS"]})],ae.prototype,"operationalLayerType",void 0),e([t({type:D,json:{name:"wfsInfo.maxFeatures",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"maxRecordCount",void 0),e([t({type:D})],ae.prototype,"maxPageCount",void 0),e([t({type:D})],ae.prototype,"maxTotalRecordCount",void 0),e([t({type:[0],readOnly:!0,json:{origins:{"web-map":{write:{ignoreOrigin:!0,isRequired:!0}}}}})],ae.prototype,"mode",void 0),e([t({type:String,json:{name:"wfsInfo.name",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"name",void 0),e([t({type:String,json:{name:"wfsInfo.wfsNamespace",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"namespaceUri",void 0),e([t(X)],ae.prototype,"opacity",void 0),e([t(oe.outFields)],ae.prototype,"outFields",void 0),e([t({readOnly:!0})],ae.prototype,"parsedUrl",null),e([t(H)],ae.prototype,"popupEnabled",void 0),e([t({type:Q,json:{name:"popupInfo",write:!0}})],ae.prototype,"popupTemplate",void 0),e([t({types:L,json:{origins:{service:{name:"drawingInfo.renderer"},"web-scene":{types:G,name:"layerDefinition.drawingInfo.renderer",write:!0}},name:"layerDefinition.drawingInfo.renderer",write:{ignoreOrigin:!0}}})],ae.prototype,"renderer",null),e([t(V)],ae.prototype,"screenSizePerspectiveEnabled",void 0),e([t({readOnly:!0})],ae.prototype,"source",void 0),e([t({type:I,json:{name:"layerDefinition.spatialReference",write:{ignoreOrigin:!0,isRequired:!0},origins:{service:{name:"extent.spatialReference"}}}})],ae.prototype,"spatialReference",void 0),e([t({readOnly:!0,type:[D],json:{name:"wfsInfo.supportedSpatialReferences",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"spatialReferences",void 0),e([t({type:Boolean,value:!1,json:{name:"wfsInfo.swapXY",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"swapXY",void 0),e([t({json:{write:{ignoreOrigin:!0,isRequired:!0},origins:{service:{name:"name"}}}})],ae.prototype,"title",void 0),e([t({json:{read:!1},readOnly:!0})],ae.prototype,"type",void 0),e([t(z)],ae.prototype,"url",void 0),e([t({type:String,readOnly:!0,json:{name:"wfsInfo.version",write:{ignoreOrigin:!0,isRequired:!0}}})],ae.prototype,"version",void 0),e([t()],ae.prototype,"wfsCapabilities",null),ae=se=e([i("esri.layers.WFSLayer")],ae);const ne=ae;export{ne as default};
